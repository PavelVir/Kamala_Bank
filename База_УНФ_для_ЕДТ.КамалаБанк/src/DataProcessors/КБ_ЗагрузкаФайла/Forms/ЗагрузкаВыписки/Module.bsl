////////////////////////////////////////////////////////////////////////////////
//Обработка.ИмяОбработки.Форма.ЗагрузкаВыписокБанка
//  Считывает выписку из файла или буфера обмена в табличный документ и создает на их основании операции
//  
//Параметры формы:
//  Стандартные параметры формы
//  
////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Перем ПараметрыОбработчика;

&НаКлиенте
Перем ПодтверждениеЗакрытияФормы;

&НаКлиенте
Перем ФормаДлительнойОперации;

&НаСервере
Перем ОбъектЭтойОбработки;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Справочники.ПравилаЧтенияТабличныхДокументов.ЗаполнитьПредустановленнымиПравилами(Ложь);

	СтруктураНастроек = Новый Структура;

	ПредставленияВидовОпераций = Новый Структура("ПоступлениеНаСчет, РасходСоСчета");
	Для Каждого КлючИЗначение Из ПредставленияВидовОпераций Цикл
		ПредставленияВидовОпераций[КлючИЗначение.Ключ] = Метаданные.Документы[КлючИЗначение.Ключ].Синоним;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)

	Если ЗначениеЗаполнено(ПравилоЧтенияДокумента) И (Не ОбщегоНазначения.СсылкаСуществует(ПравилоЧтенияДокумента)
		Или ПравилоЧтенияДокумента.ПометкаУдаления) Тогда
		// Правило чтения было помечено на удаление или удалено из базы
		ПравилоЧтенияДокумента = Справочники.ПравилаЧтенияТабличныхДокументов.ПустаяСсылка();
	КонецЕсли;

	ПриИзмененииПравилаЧтенияСервер();

	Настройки = Настройки.Получить("СтруктураНастроек");
	Если Настройки <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтруктураНастроек, Настройки);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
#Область ОбработчикиСобытийСтраницыВыпискаБанка

&НаКлиенте
Процедура ПоказатьСкрытьДокументНажатие(Элемент)

	Элементы.СтраницыПодготовкиВыписки.ТекущаяСтраница = ?(Элементы.СтраницыПодготовкиВыписки.ТекущаяСтраница
		= Элементы.СтраницаВыпискиФайл, Элементы.СтраницаВыпискиТаблица, Элементы.СтраницаВыпискиФайл);
	Если Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаВыпискаБанка Тогда
		Элементы.Прочитать.КнопкаПоУмолчанию = Элементы.СтраницыПодготовкиВыписки.ТекущаяСтраница
			= Элементы.СтраницаВыпискиФайл;
		Элементы.Прочитать1.КнопкаПоУмолчанию = Элементы.СтраницыПодготовкиВыписки.ТекущаяСтраница
			= Элементы.СтраницаВыпискиТаблица;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолноеИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ЗагрузитьФайлКлиент();

КонецПроцедуры

&НаКлиенте
Процедура ПолноеИмяФайлаПриИзменении(Элемент)

	Если ПустаяСтрока(ПолноеИмяФайла) Тогда
		ОчисткаТабличногоДокумента();
	Иначе
		ВыбранныеФайлы = Новый Массив;
		ВыбранныеФайлы.Добавить(ПолноеИмяФайла);
		ЗагрузитьФайлКлиентЗавершение(ВыбранныеФайлы, Неопределено);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПравилоЧтенияДокументаПриИзменении(Элемент)

	ПриИзмененииПравилаЧтенияСервер();

КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыпискиПриИзменении(Элемент)

	ТабличныйДокументВыпискиПриИзмененииКлиент();

КонецПроцедуры

&НаКлиенте
Процедура ПравилоЧтенияДокументаОткрытие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОткрытьПравилоЧтения();

КонецПроцедуры
#КонецОбласти
#Область ОбработчикиСобытийСтраницыСписокОпераций

&НаКлиенте
Процедура ФильтрТаблицыОперацийПриИзменении(Элемент)
	ПриИзмененииФильтраТаблицыОпераций(Истина);
КонецПроцедуры
&НаКлиенте
Процедура ТаблицаОперацийПередНачаломИзменения(Элемент, Отказ)

	ДанныеСтроки = Элементы.ТаблицаОпераций.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ДанныеСтроки.СсылкаНаОперацию) И (Элементы.ТаблицаОпераций.ТекущийЭлемент = Элементы.ТаблицаОперацийДата
		Или Элементы.ТаблицаОпераций.ТекущийЭлемент = Элементы.ТаблицаОперацийРСчет
		Или Элементы.ТаблицаОпераций.ТекущийЭлемент = Элементы.ТаблицаОперацийКонтрагент
		Или Элементы.ТаблицаОпераций.ТекущийЭлемент = Элементы.ТаблицаОперацийНомерПП
		Или Элементы.ТаблицаОпераций.ТекущийЭлемент = Элементы.ТаблицаОперацийЕДРПОУКонтрагент
		Или Элементы.ТаблицаОпераций.ТекущийЭлемент = Элементы.ТаблицаОперацийРСчет
		Или Элементы.ТаблицаОпераций.ТекущийЭлемент = Элементы.ТаблицаОперацийСуммаПоступления
		Или Элементы.ТаблицаОпераций.ТекущийЭлемент = Элементы.ТаблицаОперацийСуммаСписания) Тогда

		Отказ = Истина;
		ДополнительныеПараметры = Новый Структура("СтрокаТаблицы", Элементы.ТаблицаОпераций.ТекущаяСтрока);
		ДополнительныеПараметры.Вставить("ВидОперации", ДанныеСтроки.ВидОперации);
		Оповещение = Новый ОписаниеОповещения("СозданиеНовойОперацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьОперацию(ДанныеСтроки.СсылкаНаОперацию, ДанныеСтроки.ВидОперации, Оповещение);

	КонецЕсли;

КонецПроцедуры
#КонецОбласти
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьФайл(Команда)

	ЗагрузитьФайлКлиент();

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличныйДокумент(Команда)
	ОчисткаТабличногоДокумента();
КонецПроцедуры

&НаКлиенте
Процедура Прочитать(Команда)
	ПрочитатьТабличныйДокумент();
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаВыпискаБанка;
	Элементы.Прочитать.КнопкаПоУмолчанию = Элементы.СтраницыПодготовкиВыписки.ТекущаяСтраница
		= Элементы.СтраницаВыпискиФайл;
	Элементы.Прочитать1.КнопкаПоУмолчанию = Элементы.СтраницыПодготовкиВыписки.ТекущаяСтраница
		= Элементы.СтраницаВыпискиТаблица;
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНезагруженные(Команда)
	ИзменитьПометки(10);
КонецПроцедуры

&НаКлиенте
Процедура ПометитьВсе(Команда)
	ИзменитьПометки(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеПометки(Команда)
	ИзменитьПометки(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ИнвертироватьПометки(Команда)
	ИзменитьПометки(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОбновитьОперации(Команда)

	Если ВыполнитьПроверкуПометок() Тогда
		ВыполнитьЗагрузкуОперацийНаКлиенте();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПравило(Команда)
	ОткрытьПравилоЧтения();
КонецПроцедуры
&НаКлиенте
Процедура СкопироватьПравило(Команда)

	Если Не ЗначениеЗаполнено(ПравилоЧтенияДокумента) Тогда
		ПоказатьПредупреждение( , НСтр("ru='Не выбрано правило чтения выписки'"));
		Возврат;
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначениеКопирования", ПравилоЧтенияДокумента);
	ПараметрыФормы.Вставить("ТабличныйДокументВыписки", ТабличныйДокументВыписки);

	Оповещение = Новый ОписаниеОповещения("ОткрытьПравилоЧтенияЗавершение", ЭтотОбъект, ПравилоЧтенияДокумента);

	ОткрытьФорму("Справочник.ПравилаЧтенияТабличныхДокументов.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект,
		ПравилоЧтенияДокумента, , , Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовоеПравило(Команда)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура);
	ПараметрыФормы.Вставить("ТабличныйДокументВыписки", ТабличныйДокументВыписки);

	Оповещение = Новый ОписаниеОповещения("ОткрытьПравилоЧтенияЗавершение", ЭтотОбъект, ПравилоЧтенияДокумента);

	ОткрытьФорму("Справочник.ПравилаЧтенияТабличныхДокументов.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект,
		ПравилоЧтенияДокумента, , , Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура УдалитьПравило(Команда)

	Если Не ЗначениеЗаполнено(ПравилоЧтенияДокумента) Тогда
		ПоказатьПредупреждение( , НСтр("ru='Не выбрано правило чтения выписки'"));
		Возврат;
	КонецЕсли;

	ТекстВопроса = НСтр("ru='Удалить правило чтения выписок ""%1""?'");
	ТекстВопроса = СтрШаблон(ТекстВопроса, Строка(ПравилоЧтенияДокумента));

	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Удалить'"));
	Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена'"));

	Оповещение = Новый ОписаниеОповещения("УдалитьПравилоЗавершение", ЭтотОбъект, ПравилоЧтенияДокумента);
	ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, , КодВозвратаДиалога.Отмена, Заголовок);

КонецПроцедуры

&НаКлиенте
Процедура ПосмотретьКлючевыеСловаОперации(Команда)

	ОткрытьСписокКлючевыхСлов();

КонецПроцедуры
#КонецОбласти
#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ОбъектЭтойОбработки()

	Если ОбъектЭтойОбработки = Неопределено Тогда
		ОбъектЭтойОбработки = РеквизитФормыВЗначение("Объект");
	КонецЕсли;

	Возврат ОбъектЭтойОбработки;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЭлементамиСтраницыВыписки(Форма)

	Элементы = Форма.Элементы;
	РезультатПроверки = РезультатПроверкиДокументаВыписки(Форма);

	Если Элементы.ИзменитьПравило.Доступность <> РезультатПроверки.ПравилоУказано Тогда
		Элементы.ИзменитьПравило.Доступность     = РезультатПроверки.ПравилоУказано;
		Элементы.СкопироватьПравило.Доступность  = РезультатПроверки.ПравилоУказано;
		Элементы.УдалитьПравило.Доступность      = РезультатПроверки.ПравилоУказано;
	КонецЕсли;

	Если Элементы.Прочитать.Доступность <> РезультатПроверки.ДокументСоответствуетПравилу Тогда
		Элементы.Прочитать.Доступность  = РезультатПроверки.ДокументСоответствуетПравилу;
		Элементы.Прочитать.КнопкаПоУмолчанию = Элементы.СтраницыПодготовкиВыписки.ТекущаяСтраница
			= Элементы.СтраницаВыпискиФайл;
		Элементы.Прочитать1.Доступность = РезультатПроверки.ДокументСоответствуетПравилу;
		Элементы.Прочитать1.КнопкаПоУмолчанию = Элементы.СтраницыПодготовкиВыписки.ТекущаяСтраница
			= Элементы.СтраницаВыпискиТаблица;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НастройкиЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СтруктураНастроек, Результат);
	КонецЕсли;

КонецПроцедуры
&НаСервереБезКонтекста
Функция НайтиБанкСчет(РСчетПредставление, РСчетКлючевоеСлово)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НомерСчета", СокрЛП(РСчетПредставление));

	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	БанковскиеСчета.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.НомерСчета = &НомерСчета";

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;

	Возврат Неопределено;

КонецФункции

&НаСервереБезКонтекста
Функция НайтиКонтрагента(Представление, КлючевоеСлово)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КодПоЕДРПОУ", СокрЛП(КлючевоеСлово));

	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.КодПоЕДРПОУ = &КодПоЕДРПОУ";

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;

	Возврат Неопределено;

КонецФункции

&НаКлиенте
Процедура ТаблицаОперацийВидОперацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ВидОперации", ВыбранноеЗначение);
	ДопПараметры.Вставить("КлючевоеСлово", Элементы.ТаблицаОпераций.ТекущиеДанные.НазначениеПлатежа);

	ОткрытьФорму("ОбщаяФорма.КБ_ФормаКлючевыхСлов", ДопПараметры, , , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

#Область ТабличныйДокументВыписки

&НаКлиентеНаСервереБезКонтекста
Процедура ВыделитьОбластиТабличногоДокумента(Форма)

	ТабличныйДокументВыписки = Форма.ТабличныйДокументВыписки;
	НастройкиЧтения          = Форма.НастройкиЧтения;
	Автоцвет = Новый Цвет;
	
	// Очищаем предвдущее выделение
	МассивОбластей = Новый Массив;
	Для Каждого Область Из ТабличныйДокументВыписки.Области Цикл

		Если ТипЗнч(Область) <> Тип("ОбластьЯчеекТабличногоДокумента") Или Область.ТипОбласти
			<> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		МассивОбластей.Добавить(Область);

	КонецЦикла;

	Для Каждого Область Из МассивОбластей Цикл

		Если Область.Имя = "ВыделеннаяТаблицаВыписки" Тогда
			ПустаяЛиния = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
			Область.Обвести(ПустаяЛиния);
		КонецЕсли;

		Область.Примечание.Текст  = "";
		Область.ЦветУзора   = Автоцвет;
		Область.Узор        = ТипУзораТабличногоДокумента.БезУзора;
		Область.Имя = "";

	КонецЦикла;
	Если ТабличныйДокументВыписки.ВысотаТаблицы = 0 Или Не ЗначениеЗаполнено(НастройкиЧтения) Тогда
		Возврат;
	КонецЕсли;
	
	// узор и цвет будут чередоваться, чтобы выделения не сливались
	ПервыйУзор = ТипУзораТабличногоДокумента.Узор2;
	ВторойУзор = ТипУзораТабличногоДокумента.Узор3;
	ТекущийУзор = ПервыйУзор;

	ПервыйЦвет = WebЦвета.НейтральноЗеленый;
	ВторойЦвет = WebЦвета.НейтральноВесеннеЗеленый;
	//ВторойЦвет = WebЦвета.СветлоЗолотистый;
	ТекущийЦвет = ПервыйЦвет;
	
	// Выделяем таблицу
	Если ЗначениеЗаполнено(НастройкиЧтения[0].ПоложениеПоказателя) Тогда

		Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.БольшойПунктир, 3);
		Область = ТабличныйДокументВыписки.Область(НастройкиЧтения[0].ПоложениеПоказателя + ":"
			+ НастройкиЧтения[0].КонечнаяОбласть);
		Область.Обвести(Линия);
		Область.Имя = "ВыделеннаяТаблицаВыписки";
		Область.Примечание.Текст = НастройкиЧтения[0].Наименование + Символы.ПС + НастройкиЧтения[0].Комментарий;

	КонецЕсли;
	
	// Выделяем прочие показатели
	Для Каждого СтрокаНастройки Из НастройкиЧтения Цикл

		Если СтрокаНастройки.КлючПоказателя = "НачалоТаблицы" Тогда
			Продолжить;
		КонецЕсли;

		Если ЗначениеЗаполнено(СтрокаНастройки.ПоложениеПоказателя) Тогда

			ОбластиПоказателя = МассивОбластейПоказателя(СтрокаНастройки.ПоложениеПоказателя,
				СтрокаНастройки.КонечнаяОбласть, ТабличныйДокументВыписки);
			Счетчик = 1;
			Для Каждого Область Из ОбластиПоказателя Цикл

				Суффикс = ?(ОбластиПоказателя.Количество() = 1, "", Формат(Счетчик, "ЧДЦ=; ЧГ="));
				Область.Имя         = ?(ТипЗнч(СтрокаНастройки.КлючПоказателя) = Тип("Строка"),
					СтрокаНастройки.КлючПоказателя, "Аналитика" + Формат(Счетчик, "ЧДЦ=; ЧГ=")) + Суффикс;
				Область.Примечание.Текст  = Область.Примечание.Текст + ?(Область.Примечание.Текст = "", "", Символы.ПС
					+ Символы.ПС) + СтрокаНастройки.Наименование + Символы.ПС + СтрокаНастройки.Комментарий;
				ТекущийЦвет = ?(ТекущийЦвет = ПервыйЦвет, ВторойЦвет, ПервыйЦвет);
				Область.ЦветУзора   = ТекущийЦвет;
				ТекущийУзор = ?(ТекущийУзор = ПервыйУзор, ВторойУзор, ПервыйУзор);
				Область.Узор        = ТекущийУзор;

				Счетчик = Счетчик + 1;

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОчисткаТабличногоДокумента()

	ТабличныйДокументВыписки.Очистить();
	ОбновитьКонечныеОбластиНастройкиЧтения(НастройкиЧтения, ТабличныйДокументВыписки);
	ВыделитьОбластиТабличногоДокумента(ЭтотОбъект);

КонецПроцедуры

// Вычисляет конечные области в табличном документе выписки: 
//	для каждой колонки корректируется начальная и конечная строка таблицы
//	для одиночных значений конечная область равна начальной
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьКонечныеОбластиНастройкиЧтения(НастройкиЧтения, ТабличныйДокументВыписки)

	Если НастройкиЧтения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ПоложениеТаблицы      = НастройкиЧтения[0].ПоложениеПоказателя;
	ТабличныйДокументПуст = ТабличныйДокументВыписки.ВысотаТаблицы = 0;

	Если Не ЗначениеЗаполнено(ПоложениеТаблицы) Или ТабличныйДокументПуст Тогда

		ОбластьТаблицы   = ТабличныйДокументВыписки.Область(1, 1);
		НачальнаяСтрока  = 1;
		НачальнаяКолонка = 1;
		КонечнаяСтрока   =  1;
		КонечнаяКолонка  =  1;

	Иначе

		ОбластьНачала    = ТабличныйДокументВыписки.Область(ПоложениеТаблицы);
		НачальнаяСтрока  = ОбластьНачала.Верх;
		НачальнаяКолонка = ОбластьНачала.Лево;

		КонечнаяСтрока  = НачальнаяСтрока;
		КонечнаяКолонка = ТабличныйДокументВыписки.ШиринаТаблицы;
		
		// вычисляем конечные строку и колонку таблицы
		Если ТабличныйДокументВыписки.ВысотаТаблицы > 1 Тогда
			
			// Первая пустая строка соответствует окончанию таблицы
			Для Счетчик = НачальнаяСтрока По ТабличныйДокументВыписки.ВысотаТаблицы Цикл
				Если Не ЗначениеЗаполнено(ТабличныйДокументВыписки.Область(Счетчик, НачальнаяКолонка).Текст)
					Или Счетчик = ТабличныйДокументВыписки.ВысотаТаблицы Тогда
					КонечнаяСтрока = Макс(1, Счетчик - ?(Счетчик = ТабличныйДокументВыписки.ВысотаТаблицы, 0, 1));
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			// Вычисляем конечную колонку с учетом необязательности заполнения всех колонок
			ПраваяКолонка = ТабличныйДокументВыписки.ШиринаТаблицы;
			Пока ПраваяКолонка >= НачальнаяКолонка Цикл

				Для СчетчикСтрок = НачальнаяСтрока По КонечнаяСтрока Цикл

					Если ЗначениеЗаполнено(ТабличныйДокументВыписки.Область(СчетчикСтрок, ПраваяКолонка).Текст) Тогда
						КонечнаяКолонка = ПраваяКолонка;
						ПраваяКолонка = НачальнаяКолонка;
						Прервать;
					КонецЕсли;

				КонецЦикла;

				ПраваяКолонка = ПраваяКолонка - 1;

			КонецЦикла;

		КонецЕсли;
		
		// Определяем область таблицы
		ОбластьТаблицы = ТабличныйДокументВыписки.Область(НачальнаяСтрока, НачальнаяКолонка, КонечнаяСтрока,
			КонечнаяКолонка);

	КонецЕсли;

	НастройкиЧтения[0].КонечнаяОбласть = "R" + Формат(КонечнаяСтрока, "ЧДЦ=; ЧН=0; ЧГ=") + "C" + Формат(
		КонечнаяКолонка, "ЧДЦ=; ЧН=0; ЧГ=");
	
	// Вычисляем конечные области для прочих показателей
	ПределСчетчика = НастройкиЧтения.Количество() - 1;
	Для Счетчик = 1 По ПределСчетчика Цикл

		СтрокаНастройки = НастройкиЧтения[Счетчик];
		СтрокаНастройки.КонечнаяОбласть = "";

		Если Не ТабличныйДокументПуст И ЗначениеЗаполнено(СтрокаНастройки.ПоложениеПоказателя) Тогда
			
			// Показатель может располагаться в нескольких колонках
			МассивАдресов = СтрРазделить(СтрокаНастройки.ПоложениеПоказателя, ";", Ложь);
			НачалоПоказателя    = "";
			ОкончаниеПоказателя = "";

			Для Каждого АдресНачала Из МассивАдресов Цикл

				ОбластьПоказателя = ТабличныйДокументВыписки.Область(АдресНачала);

				Если ОбластьПринадлежитИсходной(ОбластьПоказателя, ОбластьТаблицы) Тогда
					
					// первая строка показателя-колонки должна равняться первой строке таблицы
					НачалоПоказателя    = НачалоПоказателя + ?(НачалоПоказателя = "", "", ";") + "R" + Формат(
						НачальнаяСтрока, "ЧДЦ=; ЧН=0; ЧГ=") + "C" + Формат(ОбластьПоказателя.Лево, "ЧДЦ=; ЧН=0; ЧГ=");
					// заканчивается область на последней стркое таблицы
					ОкончаниеПоказателя = ОкончаниеПоказателя + ?(ОкончаниеПоказателя = "", "", ";") + "R" + Формат(
						КонечнаяСтрока, "ЧДЦ=; ЧН=0; ЧГ=") + "C" + Формат(ОбластьПоказателя.Право, "ЧДЦ=; ЧН=0; ЧГ=");

				Иначе

					НачалоПоказателя    = НачалоПоказателя + ?(НачалоПоказателя = "", "", ";") + "R" + Формат(
						ОбластьПоказателя.Верх, "ЧДЦ=; ЧН=0; ЧГ=") + "C" + Формат(ОбластьПоказателя.Лево,
						"ЧДЦ=; ЧН=0; ЧГ=");
					ОкончаниеПоказателя = ОкончаниеПоказателя + ?(ОкончаниеПоказателя = "", "", ";") + "R" + Формат(
						ОбластьПоказателя.Низ, "ЧДЦ=; ЧН=0; ЧГ=") + "C" + Формат(ОбластьПоказателя.Право,
						"ЧДЦ=; ЧН=0; ЧГ=");

				КонецЕсли;

			КонецЦикла;

			СтрокаНастройки.ПоложениеПоказателя = НачалоПоказателя;
			СтрокаНастройки.КонечнаяОбласть     = ОкончаниеПоказателя;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОбластьПринадлежитИсходной(СравниваемаяОбласть, ИсходнаяОбласть)

	Возврат СравниваемаяОбласть.Верх >= ИсходнаяОбласть.Верх И СравниваемаяОбласть.Лево >= ИсходнаяОбласть.Лево
		И СравниваемаяОбласть.Низ <= ИсходнаяОбласть.Низ И СравниваемаяОбласть.Право <= ИсходнаяОбласть.Право

КонецФункции

&НаКлиенте
Процедура ТабличныйДокументВыпискиПриИзмененииКлиент()

	ОбновитьКонечныеОбластиНастройкиЧтения(НастройкиЧтения, ТабличныйДокументВыписки);
	ВыделитьОбластиТабличногоДокумента(ЭтотОбъект);
	УправлениеЭлементамиСтраницыВыписки(ЭтотОбъект);

КонецПроцедуры
#КонецОбласти
#Область НастройкиЧтения

&НаСервере
Процедура ПриИзмененииПравилаЧтенияСервер()

	НастройкиЧтения.Загрузить(ПолучитьНастройкиЧтения(ПравилоЧтенияДокумента));
	ОбновитьКонечныеОбластиНастройкиЧтения(НастройкиЧтения, ТабличныйДокументВыписки);
	ВыделитьОбластиТабличногоДокумента(ЭтотОбъект);
	УправлениеЭлементамиСтраницыВыписки(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура УдалитьПравилоСервер(УдаляемоеПравило)

	УдаляемоеПравило.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);

	Если УдаляемоеПравило = ПравилоЧтенияДокумента Тогда
		ПравилоЧтенияДокумента = Неопределено;
		ПриИзмененииПравилаЧтенияСервер();
	КонецЕсли;

КонецПроцедуры
&НаСервереБезКонтекста
Функция ПолучитьНастройкиЧтения(ПравилоЧтения)

	Если ЗначениеЗаполнено(ПравилоЧтения) Тогда
		ТаблицаНастроек = Справочники.ПравилаЧтенияТабличныхДокументов.СписокПоказателейПравила(ПравилоЧтения);
	Иначе
		ТаблицаНастроек = Справочники.ПравилаЧтенияТабличныхДокументов.НовыйСписокПоказателейЗагружаемогоДокумента();
	КонецЕсли;

	Возврат ТаблицаНастроек;

КонецФункции

&НаКлиенте
Процедура ОткрытьПравилоЧтения()

	Если Не ЗначениеЗаполнено(ПравилоЧтенияДокумента) Тогда
		ПоказатьПредупреждение( , НСтр("ru='Не выбрано правило чтения выписки'"));
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ПравилоЧтенияДокумента);
	ПараметрыФормы.Вставить("ТабличныйДокументВыписки", ТабличныйДокументВыписки);

	Оповещение = Новый ОписаниеОповещения("ОткрытьПравилоЧтенияЗавершение", ЭтотОбъект, ПравилоЧтенияДокумента);

	ОткрытьФорму("Справочник.ПравилаЧтенияТабличныхДокументов.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект,
		ПравилоЧтенияДокумента, , , Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПравилоЧтенияЗавершение(Правило, ДополнительныеПараметры) Экспорт

	Если Не ЗначениеЗаполнено(Правило) Тогда
		Возврат;
	КонецЕсли;

	ПравилоЧтенияДокумента = Правило;
	ПриИзмененииПравилаЧтенияСервер();

КонецПроцедуры

&НаКлиенте
Процедура УдалитьПравилоЗавершение(Ответ, УдаляемоеПравило) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		УдалитьПравилоСервер(УдаляемоеПравило);
	КонецЕсли;

КонецПроцедуры
#КонецОбласти
#Область ОткрытиеФайла

&НаКлиенте
Процедура ЗагрузитьФайлКлиент()

	Если ПодключитьРасширениеРаботыСФайлами() Тогда

		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ФайловыеФункции") Тогда
			МодульФайловыеФункцииСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ФайловыеФункцииСлужебныйКлиент");
			ПутьКФайлу = МодульФайловыеФункцииСлужебныйКлиент.КаталогМоиДокументы();
		Иначе
			ПутьКФайлу = ПолноеИмяФайла;
		КонецЕсли;

		ДиалогВыбораФайла = ПолучитьДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие, ПутьКФайлу, "");
		Оповещение = Новый ОписаниеОповещения("ЗагрузитьФайлКлиентЗавершение", ЭтотОбъект);
		ДиалогВыбораФайла.Показать(Оповещение);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлКлиентЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт

	Если ВыбранныеФайлы = Неопределено Или ВыбранныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ВыбранныйФайл     = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ВыбранныеФайлы[0]);
	ТекущееРасширение = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ВыбранныйФайл.Расширение);
	Если ЗначениеЗаполнено(ВыбранныйФайл.Имя) Тогда
		ПолноеИмяФайла = ВыбранныйФайл.ПолноеИмя;
	Иначе
		Возврат;
	КонецЕсли;

	АдресВременногоХранилища = "";
	Оповещение = Новый ОписаниеОповещения("ПриОкончаниеПомещенияФайла", ЭтотОбъект);
	НачатьПомещениеФайла(Оповещение, АдресВременногоХранилища, ПолноеИмяФайла, Ложь);

КонецПроцедуры

&НаКлиенте
Функция ПолучитьДиалогВыбораФайла(РежимДиалога, ПутьКФайлу, ИмяФайла = "")

	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалога);

	ДиалогВыбораФайла.Фильтр       = СтрокаФильтраПоРасширениюФайла(ТекущееРасширение, ДиалогВыбораФайла.ИндексФильтра);

	Если Не ПустаяСтрока(ТекущееРасширение) Тогда
		ДиалогВыбораФайла.Расширение = ТекущееРасширение;
	КонецЕсли;

	ДиалогВыбораФайла.Заголовок                   = Заголовок;
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПолноеИмяФайла              = ИмяФайла;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = РежимДиалога = РежимДиалогаВыбораФайла.Открытие;

	Возврат ДиалогВыбораФайла;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаФильтраПоРасширениюФайла(ВыбранноеРасширение, ИндексВыбранногоРасширения)

	ОписаниеРасширения = НСтр("ru='Книга Excel 2007 (*.xlsx)|*.xlsx'") + "|" + НСтр("ru='Книга Excel 97 (*.xls)|*.xls'")
		+ "|" + НСтр("ru='Таблица OpenDocument (*.ods)|*.ods'") + "|" + НСтр(
		"ru='Текстовый документ c разделителями (*.csv)|*.csv'") + "|" + НСтр(
		"ru='Табличный документ 1С:Предприятия (*.mxl)|*.mxl'") + "|" + НСтр(
		"ru='dbf файл по типу профикс (*.dbf)|*.dbf'");
	Если ВыбранноеРасширение = "xlsx" Тогда
		ИндексВыбранногоРасширения = 0;
	ИначеЕсли ВыбранноеРасширение = "xls" Тогда
		ИндексВыбранногоРасширения = 1;
	ИначеЕсли ВыбранноеРасширение = "ods" Тогда
		ИндексВыбранногоРасширения = 2;
	ИначеЕсли ВыбранноеРасширение = "csv" Тогда
		ИндексВыбранногоРасширения = 3;
	ИначеЕсли ВыбранноеРасширение = "mxl" Тогда
		ИндексВыбранногоРасширения = 4;
	ИначеЕсли ВыбранноеРасширение = "dbf" Тогда
		ИндексВыбранногоРасширения = 5;
	Иначе
		ИндексВыбранногоРасширения = 0;
	КонецЕсли;

	Возврат ОписаниеРасширения;

КонецФункции

&НаКлиенте
Процедура ПриОкончаниеПомещенияФайла(Результат, АдресВременногоХранилища, ИмяФайла, Параметр) Экспорт

	Если Результат = Истина Тогда

		Если Найти(СтрокаФильтраПоРасширениюФайла("", 0), "*." + ТекущееРасширение) > 0 Тогда

			ФоновоеЗадание = Ложь;
			ЗагрузитьФайлСДаннымиВТабличныйДокументНаСервере(АдресВременногоХранилища, ТекущееРасширение,
				ФоновоеЗадание);
			Если ФоновоеЗадание Тогда

				ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
				ПодключитьОбработчикОжидания("ФоновоеЗаданиеЗагрузкаФайлаНаКлиенте", 1, Истина);
				ПараметрыОбработчика.МаксимальныйИнтервал = 5;
				ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект,
					ФоновоеЗаданиеИдентификатор);

			Иначе

				ТабличныйДокументВыпискиПриИзмененииКлиент();

			КонецЕсли;

		Иначе

			ПоказатьПредупреждение( , НСтр(
				"ru ='Не получилось загрузить данные из выбранного файла. Убедитесь в корректности его содержимого.'"));

		КонецЕсли;

		ОбновитьКонечныеОбластиНастройкиЧтения(НастройкиЧтения, ТабличныйДокументВыписки);
		ВыделитьОбластиТабличногоДокумента(ЭтотОбъект);

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьФайлСДаннымиВТабличныйДокументНаСервере(АдресВременногоХранилища, Расширение, ФоновоеЗадание = Ложь)

	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	ДвоичныеДанные     = ПолучитьИЗВременногоХранилища(АдресВременногоХранилища);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);

	ОчисткаТабличногоДокумента();

	ПараметрыВызоваСервера = Новый Структура;
	ПараметрыВызоваСервера.Вставить("Расширение", Расширение);
	ПараметрыВызоваСервера.Вставить("ТабличныйДокумент", ТабличныйДокументВыписки);
	ПараметрыВызоваСервера.Вставить("ИмяВременногоФайла", ИмяВременногоФайла);

	ФоновоеЗаданиеАдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	ОбъектЭтойОбработки().ЗагрузитьФайлВТаблицу(ПараметрыВызоваСервера, ФоновоеЗаданиеАдресХранилища);
	ТабличныйДокументВыписки = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);

КонецПроцедуры

&НаКлиенте
Процедура ФоновоеЗаданиеЗагрузкаФайлаНаКлиенте()

	Результат = ФоновоеЗаданиеЗагрузкаФайлаПолучитьРезультат();
	Если Результат.ФоновоеЗаданиеВыполнено Тогда

		Если ФормаДлительнойОперации.Открыта() И ФормаДлительнойОперации.ИдентификаторЗадания
			= ФоновоеЗаданиеИдентификатор Тогда
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		КонецЕсли;

		ТабличныйДокументВыписки = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
		ТабличныйДокументВыпискиПриИзмененииКлиент();

	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеЗагрузкаФайлаНаКлиенте", ПараметрыОбработчика.ТекущийИнтервал,
			Истина);

	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ФоновоеЗаданиеЗагрузкаФайлаПолучитьРезультат()

	Результат = Новый Структура;
	Результат.Вставить("ФоновоеЗаданиеВыполнено", Ложь);
	Результат.ФоновоеЗаданиеВыполнено = ДлительныеОперации.ЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор);
	Возврат Результат;

КонецФункции
#КонецОбласти
#Область ЧтениеВыписки

&НаКлиентеНаСервереБезКонтекста
Функция РезультатПроверкиДокументаВыписки(Знач Форма)

	НастройкиЧтения          = Форма.НастройкиЧтения;
	ТабличныйДокументВыписки = Форма.ТабличныйДокументВыписки;

	Результат = Новый Структура("ПравилоУказано,ДокументЗаполнен,ДокументСоответствуетПравилу, СписокПроблем", Истина,
		Истина, Истина, Новый Массив);

	Если Не ЗначениеЗаполнено(Форма.ПравилоЧтенияДокумента) Тогда
		Результат.ПравилоУказано = Ложь;
		Результат.ДокументСоответствуетПравилу = Ложь;
		Результат.СписокПроблем.Добавить(НСтр("ru='Не указано правило чтения выписки'"));
	КонецЕсли;

	Если ТабличныйДокументВыписки.ВысотаТаблицы = 0 Тогда
		Результат.ДокументЗаполнен = Ложь;
		Результат.ДокументСоответствуетПравилу = Ложь;
		Результат.СписокПроблем.Добавить(НСтр("ru='Таблица выписки пуста'"));
	КонецЕсли;

	Если Не Результат.ПравилоУказано Или Не Результат.ДокументЗаполнен Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Дата операции не может быть пустой
	Если Не ЯчейкиПоказателяКорректны("Дата", НастройкиЧтения, ТабличныйДокументВыписки) Тогда
		Результат.ДокументСоответствуетПравилу = Ложь;
		Результат.СписокПроблем.Добавить(НСтр("ru='Не заданы или не содержат текст ячейки для даты'"));
	КонецЕсли;
	
	// Должно быть указано одно из следующих полей:
	КошелекУказан = ЯчейкиПоказателяКорректны("Кошелек", НастройкиЧтения, ТабличныйДокументВыписки);
	СтатьяУказана = ЯчейкиПоказателяКорректны("СтатьяДолг", НастройкиЧтения, ТабличныйДокументВыписки);
	ЕстьОписание  = ЯчейкиПоказателяКорректны("ОписаниеОперации", НастройкиЧтения, ТабличныйДокументВыписки);
	Если Не КошелекУказан И Не СтатьяУказана И Не ЕстьОписание Тогда
		Результат.ДокументСоответствуетПравилу = Ложь;
		Результат.СписокПроблем.Добавить(НСтр(
			"ru='Ячейки для определения кошелька и статьи не заданы или не содержат текст'"));
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЯчейкиПоказателяКорректны(КлючПоказателя, НастройкиЧтения, ТабличныйДокументВыписки,
	ДопускаетсяОтсутствие = Ложь)

	СтрокиНастройки = НастройкиЧтения.НайтиСтроки(Новый Структура("КлючПоказателя", КлючПоказателя));
	Если СтрокиНастройки.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;

	СтрокаПоказателя = СтрокиНастройки[0];
	Если ЗначениеЗаполнено(СтрокаПоказателя.ПоложениеПоказателя) Тогда

		МассивОбластей = МассивОбластейПоказателя(СтрокаПоказателя.ПоложениеПоказателя,
			СтрокаПоказателя.КонечнаяОбласть, ТабличныйДокументВыписки);
		КоличествоСтрок = 0;
		Для Каждого Область Из МассивОбластей Цикл
			СтрокОбласти = Область.Низ - Область.Верх + 1;
			Если СтрокОбласти > КоличествоСтрок Тогда
				КоличествоСтрок = СтрокОбласти;
			КонецЕсли;
		КонецЦикла;

		Для Счетчик = 1 По КоличествоСтрок Цикл

			ТекстПоказателя = ТекстПоказателяЯчеекПоНомеруСтроки(Счетчик, МассивОбластей, ТабличныйДокументВыписки);
			Если Не ПустаяСтрока(ТекстПоказателя) Тогда
				Возврат Истина;
			КонецЕсли;

		КонецЦикла;

	Иначе
		Возврат ДопускаетсяОтсутствие;
	КонецЕсли;

	Возврат Ложь;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МассивОбластейПоказателя(ПоложениеПоказателя, КонечнаяОбласть, ТабличныйДокументВыписки)

	Результат = Новый Массив;

	Если Не ЗначениеЗаполнено(ПоложениеПоказателя) Тогда
		Возврат Результат;
	КонецЕсли;

	МассивНачалОбластей  = СтрРазделить(ПоложениеПоказателя, ";");
	МассивКонцовОбластей = СтрРазделить(КонечнаяОбласть, ";");
	Для Счетчик = 0 По МассивНачалОбластей.Количество() - 1 Цикл

		Результат.Добавить(ТабличныйДокументВыписки.Область(МассивНачалОбластей[Счетчик] + ":"
			+ МассивКонцовОбластей[Счетчик]));

	КонецЦикла;

	Возврат Результат;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстПоказателяЯчеекПоНомеруСтроки(НомерСтроки, МассивОбластейПоказателя, ТабличныйДокументВыписки)

	ТекстПоказателя = "";

	Для Каждого Область Из МассивОбластейПоказателя Цикл

		Если Область.Лево = Область.Право И Область.Верх = Область.Низ Тогда
			ТекстПоказателя = ТекстПоказателя + ?(ТекстПоказателя = "", "", " ") + Область.Текст;
		Иначе

			НомерСтрокиПоказателя = Область.Верх + НомерСтроки - 1;
			ТекстПоказателя = ТекстПоказателя + ?(ТекстПоказателя = "", "", " ") + ТабличныйДокументВыписки.Область(
				НомерСтрокиПоказателя, Область.Лево).Текст;
		КонецЕсли;

	КонецЦикла;

	Возврат СокрЛП(ТекстПоказателя);

КонецФункции

&НаКлиенте
Процедура ПрочитатьТабличныйДокумент()

	ФоновоеЗадание = Ложь;
	ПрочитатьТабличныйДокументНаСервере(ФоновоеЗадание);

	Если ФоновоеЗадание Тогда

		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеЧтениеТабличногоДокумента", 1, Истина);
		ПараметрыОбработчика.МаксимальныйИнтервал = 5;
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект,
			ФоновоеЗаданиеИдентификатор);

	Иначе

		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаСписокОпераций;
		ПроверкаРезультатаЧтенияФайлаКлиент();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПрочитатьТабличныйДокументНаСервере(ФоновоеЗадание)

	ПараметрыВызоваСервера = Новый Структура;
	ПараметрыВызоваСервера.Вставить("ТабличныйДокумент", ТабличныйДокументВыписки);
	ПараметрыВызоваСервера.Вставить("НастройкиЧтения", НастройкиЧтения.Выгрузить());

	ФоновоеЗаданиеАдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	ОбъектЭтойОбработки().ПрочитатьТабличныйДокумент(ПараметрыВызоваСервера, ФоновоеЗаданиеАдресХранилища);

	ЧтениеТабличногоДокументаОбработатьРезультат();

КонецПроцедуры

&НаКлиенте
Процедура ФоновоеЗаданиеЧтениеТабличногоДокумента()

	Результат = ФоновоеЗаданиеЧтениеТабличногоДокументаПолучитьРезультат();
	Если Результат.ФоновоеЗаданиеВыполнено Тогда

		Если ФормаДлительнойОперации.Открыта() И ФормаДлительнойОперации.ИдентификаторЗадания
			= ФоновоеЗаданиеИдентификатор Тогда
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		КонецЕсли;
		ЧтениеТабличногоДокументаОбработатьРезультат();
		ПроверкаРезультатаЧтенияФайлаКлиент();

	Иначе

		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеЧтениеТабличногоДокумента", ПараметрыОбработчика.ТекущийИнтервал,
			Истина);

	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ФоновоеЗаданиеЧтениеТабличногоДокументаПолучитьРезультат()

	Результат = Новый Структура;
	Результат.Вставить("ФоновоеЗаданиеВыполнено", Ложь);
	Результат.ФоновоеЗаданиеВыполнено = ДлительныеОперации.ЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор);
	Возврат Результат;

КонецФункции

&НаСервере
Процедура ЧтениеТабличногоДокументаОбработатьРезультат()

	РезультатЧтения = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);

	Объект.ТаблицаОпераций.Очистить();

	Для Каждого СтрокаРезультата Из РезультатЧтения Цикл
		
		// Добавляем строку операции
		НоваяСтрока = Объект.ТаблицаОпераций.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРезультата, , "Аналитика");
		
		// Обновляем представление объектов и операции
		НоваяСтрока.Рсчет = НайтиБанкСчет(СтрокаРезультата.РСчетПредставление, СтрокаРезультата.РСчетКлючевоеСлово);
		НоваяСтрока.РСчетКонтрагент = НайтиБанкСчет(СтрокаРезультата.РСчетКонтрагентПредставление,
			СтрокаРезультата.РСчетКонтрагентКлючевоеСлово);

		Если ЗначениеЗаполнено(НоваяСтрока.РСчетКонтрагент) Тогда
			НоваяСтрока.Контрагент = кс_ОбщегоНазначенияКлиентСервер.ПолучитьЗначениеРеквизита(
				НоваяСтрока.РСчетКонтрагент, "Владелец");
		КонецЕсли;

		Если ЗначениеЗаполнено(НоваяСтрока.ЕДРПОУКонтрагент) Тогда
			лКонтрагентПроверка = НайтиКонтрагента(НоваяСтрока.КонтрагентФайл, НоваяСтрока.ЕДРПОУКонтрагент);
			Если Не ЗначениеЗаполнено(НоваяСтрока.Контрагент) Тогда
				НоваяСтрока.Контрагент = лКонтрагентПроверка;
			ИначеЕсли НоваяСтрока.Контрагент <> лКонтрагентПроверка И ЗначениеЗаполнено(лКонтрагентПроверка) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("" + НоваяСтрока.НомерСтроки + ":"
					+ лКонтрагентПроверка + "<>" + НоваяСтрока.Контрагент);
			Иначе	
				// ?
				
			КонецЕсли;
		КонецЕсли;
		Если НоваяСтрока.СуммаСписания > 0 Тогда
			ТипСтатьи = Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийРасходСоСчета");
			НоваяСтрока.ВидОперации = ТипСтатьи.ПривестиЗначение(НоваяСтрока.ВидОперации);

		Иначе
			ТипСтатьи = Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийПоступлениеНаСчет");
			НоваяСтрока.ВидОперации = ТипСтатьи.ПривестиЗначение(НоваяСтрока.ВидОперации);
		КонецЕсли;		
		
		// Обновляем иконки объектов в строке
		Если Не ЗначениеЗаполнено(НоваяСтрока.РСчет) Тогда
			НоваяСтрока.КошелекИконка = БиблиотекаКартинок.СоздатьЭлементСписка;
		КонецЕсли;	
		
		// Находим существующую операцию
		Если ЗначениеЗаполнено(НоваяСтрока.РСчет) И ЗначениеЗаполнено(НоваяСтрока.Дата) Тогда
			Операция = НайтиОперацию(НоваяСтрока.Дата, НоваяСтрока.РСчет, НоваяСтрока.НомерПП,
				НоваяСтрока.СуммаПоступления, НоваяСтрока.СуммаСписания);
			НоваяСтрока.СсылкаНаОперацию        = Операция.Операция;
			НоваяСтрока.ВидОперацииИконка       = Операция.ИконкаОперации;
		КонецЕсли;

		Если ЗначениеЗаполнено(НоваяСтрока.СсылкаНаОперацию) Тогда
			НоваяСтрока.НоваяОперация = 0;
		Иначе
			НоваяСтрока.НоваяОперация = 1;
			НоваяСтрока.СсылкаНаОперациюИконка = БиблиотекаКартинок.СоздатьЭлементСписка;
		КонецЕсли;
		
		// заполняем строки аналитики
		НоваяСтрока.Аналитика.Загрузить(СтрокаРезультата.Аналитика);

	КонецЦикла;

	ФильтрТаблицыОпераций = "Все";
	ПриИзмененииФильтраТаблицыОпераций(Истина);

КонецПроцедуры

Функция НайтиОперацию(Дата, РСчет, НомерПП, СуммаПоступления, СуммаСписания)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("РСчет", РСчет);
	Запрос.УстановитьПараметр("СуммаПоступления", СуммаПоступления);
	Запрос.УстановитьПараметр("СуммаСписания", СуммаСписания);
	Запрос.УстановитьПараметр("НомерПП", НомерПП);

	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасходСоСчета.Ссылка как Операция,
	|	9 КАК ИконкаОперации
	|ИЗ
	|	Документ.РасходСоСчета КАК РасходСоСчета
	|ГДЕ
	|	НЕ РасходСоСчета.ПометкаУдаления
	|	И РасходСоСчета.Дата МЕЖДУ НачалоПериода(&Дата, День) И КонецПериода(&Дата, День)
	|	И РасходСоСчета.БанковскийСчет = &РСчет
	|	И РасходСоСчета.СуммаДокумента = &СуммаСписания
	|	И (РасходСоСчета.НомерВходящегоДокумента = &НомерПП
	|	ИЛИ РасходСоСчета.НомерВходящегоДокумента = """")
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПоступлениеНаСчет.Ссылка КАК Операция,
	|	6 КАК ИконкаОперации
	|ИЗ
	|	Документ.ПоступлениеНаСчет КАК ПоступлениеНаСчет
	|ГДЕ
	|	НЕ ПоступлениеНаСчет.ПометкаУдаления
	|	И ПоступлениеНаСчет.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, День) И КОНЕЦПЕРИОДА(&Дата, День)
	|	И ПоступлениеНаСчет.БанковскийСчет = &РСчет
	|	И ПоступлениеНаСчет.СуммаДокумента = &СуммаПоступления
	|	И (ПоступлениеНаСчет.НомерВходящегоДокумента = &НомерПП
	|	ИЛИ ПоступлениеНаСчет.НомерВходящегоДокумента = """")";

	Выборка = Запрос.Выполнить().Выбрать();
	Результат = Новый Структура("Операция, ИконкаОперации", Неопределено, 0);
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ПроверкаРезультатаЧтенияФайлаКлиент()

	Если Объект.ТаблицаОпераций.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru='Из указанного файла не удалось получить список операций.
								   |Проверьте корректность указанного файла и правила его чтения'");
		ПоказатьПредупреждение( , ТекстПредупреждения, , Заголовок);
		Элементы.ЗагрузитьСписокОпераций.КнопкаПоУмолчанию = Ложь;
	Иначе
		Элементы.ЗагрузитьСписокОпераций.КнопкаПоУмолчанию = Истина;
	КонецЕсли;

КонецПроцедуры
#КонецОбласти
#Область ТаблицаОпераций

&НаКлиенте
Процедура ИзменитьПометки(ЗначениеПометки)

	Для Каждого СтрокаОперации Из Объект.ТаблицаОпераций Цикл

		Если ЗначениеПометки = 10 Тогда
			СтрокаОперации.Загружать = Не ЗначениеЗаполнено(СтрокаОперации.СсылкаНаОперацию);
		ИначеЕсли ЗначениеПометки = Неопределено Тогда
			СтрокаОперации.Загружать = Не СтрокаОперации.Загружать;
		Иначе
			СтрокаОперации.Загружать = ЗначениеПометки;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры
&НаСервере
Процедура ПроверитьРеквизитыОперацииПоСсылкеНаОперациюСервер(ИДСтроки, ЗаменятьСуществующиеСтатьиИКошельки = Истина)

	ПриИзмененииФильтраТаблицыОпераций();

КонецПроцедуры

&НаКлиенте
Процедура СозданиеНовойОперацииЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;

	ДанныеСтроки = Объект.ТаблицаОпераций.НайтиПоИдентификатору(ДополнительныеПараметры.СтрокаТаблицы);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ДанныеСтроки.СсылкаНаОперацию = Результат;
	ПроверитьРеквизитыОперацииПоСсылкеНаОперациюСервер(ДополнительныеПараметры.СтрокаТаблицы);
	ПриИзмененииФильтраТаблицыОпераций();

КонецПроцедуры

&НаКлиенте
Процедура ВыборОперацииЗавершение(Результат, ДополнительныеПараметры) Экспорт

	ДанныеСтроки = Объект.ТаблицаОпераций.НайтиПоИдентификатору(ДополнительныеПараметры.СтрокаТаблицы);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ДанныеСтроки.СсылкаНаОперацию = Результат;
	ПроверитьРеквизитыОперацииПоСсылкеНаОперациюСервер(ДополнительныеПараметры.СтрокаТаблицы);

КонецПроцедуры
&НаКлиенте
Функция ВыполнитьПроверкуПометок()

	ЕстьОтметки = Ложь;
	ОтмеченыСуществующиеОперации = Ложь;

	Для Каждого СтрокаОперации Из Объект.ТаблицаОпераций Цикл

		Если Не СтрокаОперации.Загружать Тогда
			Продолжить;
		КонецЕсли;

		ЕстьОтметки = Истина;

		Если ЗначениеЗаполнено(СтрокаОперации.СсылкаНаОперацию) Тогда
			ОтмеченыСуществующиеОперации = Истина;
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Если Не ЕстьОтметки Тогда

		ТекстСообщения = НСтр("ru='В списке не отмечено ни одной строки.
							  |Пометьте галочкой те строки, по которым нужно создать или обновить операции'");
		ПоказатьПредупреждение( , ТекстСообщения, , Заголовок);
		Возврат Ложь;

	КонецЕсли;

	Если ОтмеченыСуществующиеОперации Тогда

		ТекстСообщения = НСтр("ru='В списке отмечены уже существующие операции; при обновлении содержимое этих операций будет заменено.
							  |Продолжить создание/обновление операций?'");
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("Продолжить", НСтр("ru='Продолжить'"));
		Кнопки.Добавить("СнятьВыделение", НСтр("ru='Снять отметку с существующих операций'"));
		Кнопки.Добавить("Отмена", НСтр("ru='Отмена'"));

		Оповещение = Новый ОписаниеОповещения("ПодтверждениеЗагрузкиЗавершение", ЭтотОбъект, "ОбновлениеОпераций");
		ПоказатьВопрос(Оповещение, ТекстСообщения, Кнопки, , "СнятьВыделение", Заголовок);
		Возврат Ложь;

	КонецЕсли;

	Возврат Истина;

КонецФункции

&НаКлиенте
Процедура ПодтверждениеЗагрузкиЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = "Продолжить" Тогда
		ВыполнитьЗагрузкуОперацийНаКлиенте();
	ИначеЕсли Ответ = "СнятьВыделение" Тогда
		ИзменитьПометки(10);
		ВыполнитьЗагрузкуОперацийНаКлиенте();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуОперацийНаКлиенте()

	Состояние(НСтр("ru='Ждите, идет создание/обновление операций...'"));
	РезультатЗагрузки = ВыполнитьЗагрузкуОперацийНаСервере();
	ОчиститьСообщения();

	КоличествоЧерновиков = РезультатЗагрузки.СписокЧерновиков.Количество();
	Если КоличествоЧерновиков > 0 Тогда
		ТекстСообщения = НСтр("ru='Всего обработано операций: %1
							  |Не удалось создать/обновить %2 операции (операций)'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, РезультатЗагрузки.ОбработаноОпераций, КоличествоЧерновиков);
	Иначе
		ТекстСообщения = НСтр("ru='Все отмеченные операции успешно созданы и обновлены.'");
	КонецЕсли;

	ПоказатьПредупреждение( , ТекстСообщения, , Заголовок);

КонецПроцедуры

&НаСервере
Функция ВыполнитьЗагрузкуОперацийНаСервере()

	ПустаяКартинка = Новый Картинка;
	ОтмеченныеСтроки = Объект.ТаблицаОпераций.НайтиСтроки(Новый Структура("Загружать", Истина));

	Для Каждого СтрокаОперации Из ОтмеченныеСтроки Цикл

		Если Не ЗначениеЗаполнено(СтрокаОперации.РСчет) Тогда
			Продолжить;
		КонецЕсли;
		
		//	СтрокаОперации.РСчет = НайтиБанкСчет(СтрокаОперации.РСчетПредставление, СтрокаОперации.РСчетКлючевоеСлово);
		СтрокаОперации.КошелекИконка = ПустаяКартинка;
		//	ОбновитьСсылкиВТаблицеОпераций(Объект.ТаблицаОпераций, СтрокаОперации.ВидОперации, "Кошелек", СтрокаОперации.РСчетКлючевоеСлово, СтрокаОперации.РСчет, ПредставленияВидовОпераций, Ложь);
		//	ЗаписатьКлючевоеСловоОъекта(СтрокаОперации.РСчетКлючевоеСлово, СтрокаОперации.РСчет, СтрокаОперации.СуммаПоступления <> 0);
		
		// При необходимости создаем статью, долг, кошелек перемещения
		
		// Обновляем ссылки аналитики

	КонецЦикла;
	
	// Создаем операции
	СписокЧерновиков = Новый Массив;
	Для Каждого СтрокаОперации Из ОтмеченныеСтроки Цикл

		Если Не ЗначениеЗаполнено(СтрокаОперации.РСчет) Или Не ЗначениеЗаполнено(СтрокаОперации.Дата) Тогда
			СписокЧерновиков.Добавить(СтрокаОперации.ПолучитьИдентификатор());
			Продолжить;
		КонецЕсли;

		ЗначенияЗаполнения = ЗначенияЗаполненияОперации(Объект.ТаблицаОпераций, СтрокаОперации.ПолучитьИдентификатор(),
			ВалютаУчета);

		ТекущиеАналитикаИКомментарии = Неопределено;
		Если ЗначениеЗаполнено(СтрокаОперации.СсылкаНаОперацию) Тогда
			ДокументОбъект = СтрокаОперации.СсылкаНаОперацию.ПолучитьОбъект();
			ОчиститьДокумент(ДокументОбъект, ТекущиеАналитикаИКомментарии);
		Иначе
			ДокументОбъект = Документы[ИмяМенеджераПоВидуОперации(СтрокаОперации.ВидОперации)].СоздатьДокумент();
		КонецЕсли;

		ДокументОбъект.Заполнить(ЗначенияЗаполнения);
		Если Не ЗначениеЗаполнено(ДокументОбъект.НазначениеПлатежа) Тогда
			ДокументОбъект.НазначениеПлатежа = ЗначенияЗаполнения.КомментарийОперации;
		КонецЕсли;

		Если ЗначениеЗаполнено(СтрокаОперации.СсылкаНаОперацию) Тогда
			лРеквизиты = кс_ОбщегоНазначенияКлиентСервер.ПолучитьЗначенияРеквизитов(СтрокаОперации.СсылкаНаОперацию,
				"ВидОперации");
			СтрокаОперации.ВидОперации = лРеквизиты.ВидОперации;
		Иначе
			ЗаполнитьАналитикуВНовомДокументе(ДокументОбъект, СтрокаОперации);
		КонецЕсли;

		Если ДокументОбъект.ПроверитьЗаполнение() Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			//СтрокаОперации.НомерПП = НСтр("ru='см. операцию'");
		Иначе
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			//СтрокаОперации.НомерПП = НСтр("ru='см. операцию'"); 
			//СписокЧерновиков.Добавить(СтрокаОперации.ПолучитьИдентификатор());
		КонецЕсли;
		СтрокаОперации.СсылкаНаОперацию              = ДокументОбъект.Ссылка;
		СтрокаОперации.СсылкаНаОперациюПредставление = Строка(ДокументОбъект.Ссылка);

		СтрокаОперации.НоваяОперация = Число(Не ЗначениеЗаполнено(СтрокаОперации.СсылкаНаОперацию));

	КонецЦикла;

	Результат = Новый Структура("ОбработаноОпераций,СписокЧерновиков", ОтмеченныеСтроки.Количество(), СписокЧерновиков);

	Если СписокЧерновиков.Количество() = 0 Тогда
		ФильтрТаблицыОпераций = "Загруженные";
	Иначе
		ФильтрТаблицыОпераций = "Новые";
	КонецЕсли;

	ПриИзмененииФильтраТаблицыОпераций(Истина);

	Возврат Результат;

КонецФункции
&НаКлиентеНаСервереБезКонтекста
Функция ИмяМенеджераПоВидуОперации(ВидОперации)

	Если ТипЗнч(ВидОперации) = Тип("ПеречислениеСсылка.ВидыОперацийПоступлениеНаСчет") Тогда
		Возврат "ПоступлениеНаСчет";

	ИначеЕсли ТипЗнч(ВидОперации) = Тип("ПеречислениеСсылка.ВидыОперацийРасходСоСчета") Тогда
		Возврат "РасходСоСчета";

	КонецЕсли;

КонецФункции

&НаСервереБезКонтекста
Процедура ОчиститьДокумент(ДокументОбъект, ТекущиеЗначения)

	ТекущиеЗначения = Неопределено;

	ТипДокумента = ТипЗнч(ДокументОбъект);

	Если ТипДокумента = Тип("ДокументОбъект.РасходСоСчета") Тогда
		ДокументОбъект.РасшифровкаПлатежа.Очистить();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАналитикуВНовомДокументе(ДокументОбъект, СтрокаОперации)
	Если СтрокаОперации.Аналитика.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	лАналитикиДокумента = ЗаполняемыеАналитики(); // ИД объекта (справочник идентиф.) + имя реквизита документа

	Для Каждого СтрокаАналитики Из СтрокаОперации.Аналитика Цикл

		Если Не ЗначениеЗаполнено(СтрокаАналитики.ВидАналитики) Или Не ЗначениеЗаполнено(СтрокаАналитики.Значение) Тогда
			Продолжить;
		КонецЕсли;

		лИмяАналитики = лАналитикиДокумента.Получить(СтрокаАналитики.ВидАналитики);

		Если лИмяАналитики <> Неопределено Тогда
			ДокументОбъект[лИмяАналитики] = СтрокаАналитики.Значение;
		КонецЕсли;

	КонецЦикла;

	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОбъект, "РасшифровкаПлатежа") Тогда

		Если ДокументОбъект.РасшифровкаПлатежа.Количество() > 0 Тогда
			ДокументОбъект.РасшифровкаПлатежа[0].СтавкаНДС = Справочники.СтавкиНДС.ОсновнаяСтавкаНДС;

			Если ДокументОбъект.ВидОперации = ПредопределенноеЗначение(
				"Перечисление.ВидыОперацийРасходСоСчета.Поставщику") Или ДокументОбъект.ВидОперации
				= ПредопределенноеЗначение(
		"Перечисление.ВидыОперацийПоступлениеНаСчет.ОтПокупателя") Тогда
				ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(ДокументОбъект, ДокументОбъект.Контрагент,
					ДокументОбъект.Организация, ДокументОбъект.ВидОперации);
				ДокументОбъект.РасшифровкаПлатежа[0].Договор = ДоговорПоУмолчанию;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполняемыеАналитики()

	// Для УНФ
	лРезультат = Новый Соответствие;
	лРезультат.Вставить(ИдОбъекта(Справочники.БанковскиеСчета.ПустаяСсылка()), "БанковскийСчет");
	лРезультат.Вставить(ИдОбъекта(Справочники.ВидыНалогов.ПустаяСсылка()), "ВидНалога");
	лРезультат.Вставить(ИдОбъекта(Справочники.Сотрудники.ПустаяСсылка()), "Подотчетник");
	лРезультат.Вставить(ИдОбъекта(Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка()), "Статья");
	лРезультат.Вставить(ИдОбъекта(ПланыСчетов.Управленческий.ПустаяСсылка()), "Корреспонденция");

	Возврат лРезультат;

КонецФункции

&НаСервереБезКонтекста
Функция ИдОбъекта(пСсылка)
	Возврат ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(пСсылка));
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗначенияЗаполненияОперации(Знач ТаблицаОпераций, Знач ИДСтроки, ВалютаУчета)

	ДанныеСтроки = ТаблицаОпераций.НайтиПоИдентификатору(ИДСтроки);

	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Дата", ДанныеСтроки.Дата);
	ЗначенияЗаполнения.Вставить("БанковскийСчет", ДанныеСтроки.РСчет);
	ЗначенияЗаполнения.Вставить("НазначениеПлатежа", ДанныеСтроки.НазначениеПлатежа);
	ЗначенияЗаполнения.Вставить("Контрагент", ДанныеСтроки.Контрагент);
	ЗначенияЗаполнения.Вставить("ВидОперации", ДанныеСтроки.ВидОперации);
	ЗначенияЗаполнения.Вставить("НомерВходящегоДокумента", ДанныеСтроки.НомерПП);
	ЗначенияЗаполнения.Вставить("Автор", ПользователиКлиентСервер.АвторизованныйПользователь());
	лРеквизит = кс_ОбщегоНазначенияКлиентСервер.ПолучитьЗначениеРеквизита(ДанныеСтроки.РСчет, "Владелец");
	ЗначенияЗаполнения.Вставить("Организация", лРеквизит);

	Если ДанныеСтроки.СуммаПоступления <> 0 Тогда
		ЗначенияЗаполнения.Вставить("СуммаДокумента", ДанныеСтроки.СуммаПоступления);

	ИначеЕсли ДанныеСтроки.СуммаСписания <> 0 Тогда
		ЗначенияЗаполнения.Вставить("СуммаДокумента", ДанныеСтроки.СуммаСписания);

	Иначе
		// ?
		
	КонецЕсли;
	Возврат ЗначенияЗаполнения;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация, ВидОперации)

	Если Не Контрагент.ВестиРасчетыПоДоговорам Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Контрагент);
	КонецЕсли;

	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;

	СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент,
		Организация, СписокВидовДоговоров);

	Возврат ДоговорПоУмолчанию;

КонецФункции

&НаСервере
Процедура ПриИзмененииФильтраТаблицыОпераций(ИзменятьОтбор = Ложь)

	КоличествоВсего        = Объект.ТаблицаОпераций.Количество();
	КоличествоНовых        = Объект.ТаблицаОпераций.Итог("НоваяОперация");

	ЗаголовокВсеОперации = НСтр("ru='Все операции (%1)'");
	ЗаголовокВсеОперации = СтрШаблон(ЗаголовокВсеОперации, КоличествоВсего);
	ЗаголовокНовые = НСтр("ru='Новые (%1)'");
	ЗаголовокНовые = СтрШаблон(ЗаголовокНовые, КоличествоНовых);
	ЗаголовокЗагруженные = НСтр("ru='Загруженные (%1)'");
	ЗаголовокЗагруженные = СтрШаблон(ЗаголовокЗагруженные, КоличествоВсего - КоличествоНовых);

	Элементы.ФильтрТаблицыОпераций.СписокВыбора[0].Представление = ЗаголовокВсеОперации;
	Элементы.ФильтрТаблицыОпераций.СписокВыбора[1].Представление = ЗаголовокНовые;
	Элементы.ФильтрТаблицыОпераций.СписокВыбора[2].Представление = ЗаголовокЗагруженные;

	Если ИзменятьОтбор Тогда

		Если ФильтрТаблицыОпераций = "Новые" Тогда
			Элементы.ТаблицаОпераций.ОтборСтрок = Новый ФиксированнаяСтруктура("НоваяОперация", 1);
		ИначеЕсли ФильтрТаблицыОпераций = "Загруженные" Тогда
			Элементы.ТаблицаОпераций.ОтборСтрок = Новый ФиксированнаяСтруктура("НоваяОперация", 0);
		Иначе
			Элементы.ТаблицаОпераций.ОтборСтрок = Неопределено;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОперацию(Операция, ВидОперации, Оповещение, ПараметрыОперации = Неопределено)

	// Обход ошибки платформы, из-за которой ПоказатьЗначение() не вызывает обработчик оповещения
	Если ТипЗнч(ПараметрыОперации) <> Тип("Структура") Тогда
		ПараметрыОперации = Новый Структура;
	КонецЕсли;
	ПараметрыОперации.Вставить("Ключ", Операция);

	ОткрытьФорму("Документ." + ИмяМенеджераПоВидуОперации(ВидОперации) + ".ФормаОбъекта", ПараметрыОперации,
		ЭтотОбъект, Операция, , , Оповещение);

КонецПроцедуры
#КонецОбласти
#Область ЧтениеСозданиеОбъектовУчета

&НаКлиенте
Процедура ОткрытьСписокКлючевыхСлов()

	ДанныеСтроки = Элементы.ТаблицаОпераций.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура);
	//ПараметрыФормы.Отбор.Вставить("КлючевоеСлово", КлючевоеСлово);
	ОткрытьФорму("РегистрСведений.КБ_КлючевыеСловаОбъектов.ФормаСписка", ПараметрыФормы, , , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура Декорация2Нажатие(Элемент)
	Элементы.ГруппаПодсказкаСпискаОпераций.Видимость = Не Элементы.ГруппаПодсказкаСпискаОпераций.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОперацийСсылкаНаОперациюОчистка(Элемент, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ТаблицаОпераций.ТекущиеДанные;

КонецПроцедуры

#КонецОбласти

#КонецОбласти