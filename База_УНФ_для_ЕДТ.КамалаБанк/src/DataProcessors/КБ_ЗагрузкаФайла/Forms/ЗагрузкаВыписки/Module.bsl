////////////////////////////////////////////////////////////////////////////////
//Обработка.ИмяОбработки.Форма.ЗагрузкаВыписокБанка
//  Считывает выписку из файла или буфера обмена в табличный документ и создает на их основании операции
//  
//Параметры формы:
//  Стандартные параметры формы
//  
////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Перем ПараметрыОбработчика;

&НаКлиенте
Перем ПодтверждениеЗакрытияФормы;

&НаКлиенте
Перем ФормаДлительнойОперации;

&НаСервере 
Перем ОбъектЭтойОбработки;



#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Справочники.ПравилаЧтенияТабличныхДокументов.ЗаполнитьПредустановленнымиПравилами(Ложь);
	
	СтруктураНастроек = Новый Структура;
	//СтруктураНастроек.Вставить("КошелекПоУмолчанию",           ПользовательскиеНастройкиДеньгиСервер.ОсновнойКошелек());
	//СтруктураНастроек.Вставить("ГруппаДляНовыхКошельков",      Справочники.КошелькиИСчета.ПустаяСсылка());
	//СтруктураНастроек.Вставить("ГруппаДляНовыхСтатейДоходов",  Справочники.СтатьиДоходов.ПустаяСсылка());
	//СтруктураНастроек.Вставить("ГруппаДляНовыхСтатейРасходов", Справочники.СтатьиРасходов.ПустаяСсылка());
	
	ПредставленияВидовОпераций = Новый Структура("ПоступлениеНаСчет, РасходСоСчета");
	Для каждого КлючИЗначение Из ПредставленияВидовОпераций Цикл
		ПредставленияВидовОпераций[КлючИЗначение.Ключ] = Метаданные.Документы[КлючИЗначение.Ключ].Синоним;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если ЗначениеЗаполнено(ПравилоЧтенияДокумента) 
		И (Не ОбщегоНазначения.СсылкаСуществует(ПравилоЧтенияДокумента)
			ИЛИ ПравилоЧтенияДокумента.ПометкаУдаления) Тогда
		// Правило чтения было помечено на удаление или удалено из базы
		ПравилоЧтенияДокумента = Справочники.ПравилаЧтенияТабличныхДокументов.ПустаяСсылка();
	КонецЕсли;
	
	ПриИзмененииПравилаЧтенияСервер();
	
	Настройки = Настройки.Получить("СтруктураНастроек");
	Если Настройки <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтруктураНастроек, Настройки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийСтраницыВыпискаБанка

&НаКлиенте
Процедура ПоказатьСкрытьДокументНажатие(Элемент)
	
	Элементы.СтраницыПодготовкиВыписки.ТекущаяСтраница = 
			?(Элементы.СтраницыПодготовкиВыписки.ТекущаяСтраница = Элементы.СтраницаВыпискиФайл, 
			Элементы.СтраницаВыпискиТаблица, Элементы.СтраницаВыпискиФайл);
	Если Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаВыпискаБанка Тогда
		Элементы.Прочитать.КнопкаПоУмолчанию = Элементы.СтраницыПодготовкиВыписки.ТекущаяСтраница = Элементы.СтраницаВыпискиФайл;
		Элементы.Прочитать1.КнопкаПоУмолчанию = Элементы.СтраницыПодготовкиВыписки.ТекущаяСтраница = Элементы.СтраницаВыпискиТаблица;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПолноеИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗагрузитьФайлКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолноеИмяФайлаПриИзменении(Элемент)
	
	Если ПустаяСтрока(ПолноеИмяФайла) Тогда
		ОчисткаТабличногоДокумента();
	Иначе
		ВыбранныеФайлы = Новый Массив;
		ВыбранныеФайлы.Добавить(ПолноеИмяФайла);
		ЗагрузитьФайлКлиентЗавершение(ВыбранныеФайлы, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилоЧтенияДокументаПриИзменении(Элемент)
	
	ПриИзмененииПравилаЧтенияСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыпискиПриИзменении(Элемент)
	
	ТабличныйДокументВыпискиПриИзмененииКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилоЧтенияДокументаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПравилоЧтения();
	
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийСтраницыСписокОпераций

&НаКлиенте
Процедура ФильтрТаблицыОперацийПриИзменении(Элемент)
	ПриИзмененииФильтраТаблицыОпераций(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОперацийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
 	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОперацийПередНачаломИзменения(Элемент, Отказ)
	
	ДанныеСтроки = Элементы.ТаблицаОпераций.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСтроки.СсылкаНаОперацию) И (
		Элементы.ТаблицаОпераций.ТекущийЭлемент = Элементы.ТаблицаОперацийДата
		Или Элементы.ТаблицаОпераций.ТекущийЭлемент = Элементы.ТаблицаОперацийРСчет
 		Или Элементы.ТаблицаОпераций.ТекущийЭлемент = Элементы.ТаблицаОперацийСуммаПоступления
		Или Элементы.ТаблицаОпераций.ТекущийЭлемент = Элементы.ТаблицаОперацийСуммаСписания
		) Тогда
		
		Отказ = Истина;
		ДополнительныеПараметры = Новый Структура("СтрокаТаблицы", Элементы.ТаблицаОпераций.ТекущаяСтрока);
		ДополнительныеПараметры.Вставить("ВидОперации", ДанныеСтроки.ВидОперации);
		Оповещение = Новый ОписаниеОповещения("СозданиеНовойОперацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьОперацию(ДанныеСтроки.СсылкаНаОперацию, ДанныеСтроки.ВидОперации, Оповещение);
			
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаОперацийКошелекАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ДанныеСтроки = Элементы.ТаблицаОпераций.ТекущиеДанные;
	
	Если ПустаяСтрока(Текст) И Не ЗначениеЗаполнено(ДанныеСтроки.РСчет) Тогда
		Текст = ДанныеСтроки.РСчетПредставление;
		ПараметрыПолученияДанных.СтрокаПоиска = ДанныеСтроки.РСчетПредставление;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОперацийКошелекОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	//ДанныеСтроки = Элементы.ТаблицаОпераций.ТекущиеДанные;
	//
	//ТипВыбранного = ТипЗнч(ВыбранноеЗначение);
	//Если ТипВыбранного = Тип("Строка") Тогда
	//	ОбслуживаниеСправочниковКлиент.РасширенноеПолучениеДанныхОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, ДанныеСтроки.КошелекПредставление);
	//КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОперацийКошелекПриИзменении(Элемент)
	
	//ДанныеСтроки = Элементы.ТаблицаОпераций.ТекущиеДанные;
	//
	//Если ЗначениеЗаполнено(ДанныеСтроки.Кошелек) И ЗначениеЗаполнено(ДанныеСтроки.КошелекКлючевоеСлово) Тогда
	//	
	//	РезультатЗаписи = ЗаписатьКлючевоеСловоОъекта(ДанныеСтроки.КошелекКлючевоеСлово, ДанныеСтроки.Кошелек, ДанныеСтроки.СуммаПоступления <> 0);
	//	
	//	Если  РезультатЗаписи.Записано Тогда
	//		
	//		ОбновитьСсылкиВТаблицеОпераций(Объект.ТаблицаОпераций, ДанныеСтроки.ВидОперации, "Кошелек", ДанныеСтроки.КошелекКлючевоеСлово, ДанныеСтроки.Кошелек, ПредставленияВидовОпераций);
	//		
	//	Иначе
	//		
	//		ТекстВопроса = НСтр("ru='Ранее для текста ""%1"" использовался кошелек ""%2""
	//					|Запомнить новый кошелек для этого текста?'");
	//		ТекстВопроса = СтрШаблон(ТекстВопроса, ДеньгиКлиентСервер.СокращенноеПредставление(ДанныеСтроки.КошелекКлючевоеСлово, 50, Ложь), РезультатЗаписи.СуществующийОбъект);
	//		
	//		Кнопки = новый СписокЗначений;
	//		Кнопки.Добавить(КодВозвратаДиалога.Да,  НСтр("ru='Запомнить новый кошелек'"));
	//		Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Оставить прежний кошелек'"));
	//		
	//		ДополнительныеПараметры = Новый Структура("КлючевоеСлово, Объект, ИДСтроки, ИмяПоля", ДанныеСтроки.КошелекКлючевоеСлово, ДанныеСтроки.Кошелек, ДанныеСтроки.ПолучитьИдентификатор(), "Кошелек");
	//		Оповещение = Новый ОписаниеОповещения("ВопросЗаменыОбъектаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	//		
	//		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, , КодВозвратаДиалога.Да, Заголовок);
	//		
	//	КонецЕсли;
	//	
	//	ОбновитьОперацииПриИзмененииКошелька(ДанныеСтроки.Кошелек);
	//	
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОперацийСтатьяДолгОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	//ДанныеСтроки = Элементы.ТаблицаОпераций.ТекущиеДанные;
	//
	//ТипВыбранного = ТипЗнч(ВыбранноеЗначение);
	//Если ТипВыбранного = Тип("Строка") Тогда
	//	ОбслуживаниеСправочниковКлиент.РасширенноеПолучениеДанныхОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, ДанныеСтроки.СтатьяДолгПредставление);
	//КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОперацийСтатьяДолгПриИзменении(Элемент)
	
	//ДанныеСтроки = Элементы.ТаблицаОпераций.ТекущиеДанные;
	//СсылкаНаОперацию = ДанныеСтроки.СсылкаНаОперацию;
	//
	//ПроверитьРеквизитыОперацииПоТипуСтатьиДолга(Объект.ТаблицаОпераций, ДанныеСтроки.ПолучитьИдентификатор(), ПредставленияВидовОпераций);
	//
	//Если ЗначениеЗаполнено(ДанныеСтроки.СтатьяДолг) И ЗначениеЗаполнено(ДанныеСтроки.СтатьяДолгКлючевоеСлово) Тогда
	//	
	//	РезультатЗаписи = ЗаписатьКлючевоеСловоОъекта(ДанныеСтроки.СтатьяДолгКлючевоеСлово, ДанныеСтроки.СтатьяДолг, ДанныеСтроки.СуммаПоступления <> 0);
	//	
	//	Если РезультатЗаписи.Записано Тогда
	//		
	//		ОбновитьСсылкиВТаблицеОпераций(Объект.ТаблицаОпераций, ДанныеСтроки.ВидОперации, "СтатьяДолг", ДанныеСтроки.СтатьяДолгКлючевоеСлово, ДанныеСтроки.СтатьяДолг, ПредставленияВидовОпераций);
	//		
	//	Иначе
	//		
	//		Кнопки = новый СписокЗначений;
	//		
	//		Если ТипЗнч(РезультатЗаписи.СуществующийОбъект) = Тип("СправочникСсылка.СтатьиДоходов") Тогда
	//			
	//			ТекстВопроса = НСтр("ru='Ранее для текста ""%1"" использовалась статья дохода ""%2""'");
	//			
	//		ИначеЕсли ТипЗнч(РезультатЗаписи.СуществующийОбъект) = Тип("СправочникСсылка.СтатьиРасходов") Тогда
	//			
	//			ТекстВопроса = НСтр("ru='Ранее для текста ""%1"" использовалась статья расхода ""%2""'");
	//			
	//		ИначеЕсли ТипЗнч(РезультатЗаписи.СуществующийОбъект) = Тип("СправочникСсылка.КошелькиИСчета") Тогда
	//			
	//			ТекстВопроса = НСтр("ru='Ранее для текста ""%1"" использовался кошелек ""%2""'");
	//			
	//		ИначеЕсли ТипЗнч(РезультатЗаписи.СуществующийОбъект) = Тип("СправочникСсылка.Имущество") Тогда
	//			
	//			ТекстВопроса = НСтр("ru='Ранее для текста ""%1"" использовалось имущество ""%2""'");
	//			
	//		ИначеЕсли ТипЗнч(РезультатЗаписи.СуществующийОбъект) = Тип("СправочникСсылка.Долги") Тогда
	//			
	//			ТекстВопроса = НСтр("ru='Ранее для текста ""%1"" использовался долг ""%2""'");
	//			
	//		Иначе
	//			
	//			ТекстВопроса = НСтр("ru='Ранее для текста ""%1"" использовалась запись ""%2""'");
	//			
	//		КонецЕсли;
	//		
	//		ТекстВопроса = ТекстВопроса + Символы.ПС 
	//			+ НСтр("ru='Запомнить новое значение для использования в будущем?'");
	//		
	//		ТекстВопроса = СтрШаблон(ТекстВопроса, ДеньгиКлиентСервер.СокращенноеПредставление(ДанныеСтроки.СтатьяДолгКлючевоеСлово, 50, Ложь), РезультатЗаписи.СуществующийОбъект);
	//		Кнопки.Добавить(КодВозвратаДиалога.Да,  НСтр("ru='Запомнить'"));
	//		Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Оставить прежнее значение'"));
	//		
	//		ДополнительныеПараметры = Новый Структура("КлючевоеСлово, Объект, ИДСтроки, ИмяПоля", ДанныеСтроки.СтатьяДолгКлючевоеСлово, ДанныеСтроки.СтатьяДолг, ДанныеСтроки.ПолучитьИдентификатор(), "СтатьяДолг");
	//		Оповещение = Новый ОписаниеОповещения("ВопросЗаменыОбъектаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	//		
	//		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, , КодВозвратаДиалога.Да, Заголовок);
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;
	//
	//ДанныеСтроки.СтатьяДолгИконка = ?(ЗначениеЗаполнено(ДанныеСтроки.СтатьяДолг), Новый Картинка, БиблиотекаКартинок.БыстроСоздатьЭлементСписка);
	//Если ЗначениеЗаполнено(ДанныеСтроки.СтатьяДолг)И СсылкаНаОперацию <> ДанныеСтроки.СсылкаНаОперацию Тогда
	//	ПриИзмененииФильтраТаблицыОпераций();
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОперацийСсылкаНаОперациюАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ДанныеСтроки = Элементы.ТаблицаОпераций.ТекущиеДанные;
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	
	Если ЗначениеЗаполнено(ДанныеСтроки.СсылкаНаОперацию) Тогда
		
		ДанныеВыбора.Добавить("Открыть", НСтр("ru='Открыть операцию'"));
		ДанныеВыбора.Добавить("Очистить", НСтр("ru='Очистить ссылку на операцию'"));
		ДанныеВыбора.Добавить("Выбрать", НСтр("ru='Выбрать другую операцию...'"));
		
	Иначе
		
		ДанныеВыбора.Добавить("Автосоздание.Доход", НСтр("ru='Доход (создать автоматически)'"));
		ДанныеВыбора.Добавить("Автосоздание.Расход", НСтр("ru='Расход (создать автоматически)'"));
		ДанныеВыбора.Добавить("Автосоздание.Перемещение", НСтр("ru='Перемещение (создать автоматически)'"));
		
		ДанныеВыбора.Добавить("Создать", НСтр("ru='Создать операцию вручную...'"),, БиблиотекаКартинок.СоздатьДокумент);
		ДанныеВыбора.Добавить("Выбрать", НСтр("ru='Выбрать существующую операцию...'"), , БиблиотекаКартинок.ВыбратьИзСписка);
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОперацийСсылкаНаОперациюОчистка(Элемент, СтандартнаяОбработка)
	
	ДанныеСтроки = Элементы.ТаблицаОпераций.ТекущиеДанные;
	ПроверитьРеквизитыОперацииПоСсылкеНаОперациюСервер(ДанныеСтроки.ПолучитьИдентификатор());
	ПриИзмененииФильтраТаблицыОпераций();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОперацийСсылкаНаОперациюОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	//ДанныеСтроки = Элементы.ТаблицаОпераций.ТекущиеДанные;
	//
	//ДополнительныеПараметры = Новый Структура("СтрокаТаблицы", Элементы.ТаблицаОпераций.ТекущаяСтрока);
	//
	//ТипВыбранного = ТипЗнч(ВыбранноеЗначение);
	//Если ТипВыбранного = Тип("Строка") Тогда
	//	
	//	СтандартнаяОбработка = Ложь;
	//	Если Найти(ВыбранноеЗначение, "Автосоздание") = 1 Тогда
	//		
	//		ДанныеСтроки.ВидОперации = СтрЗаменить(ВыбранноеЗначение, "Автосоздание.", "");
	//		
	//		Если ДанныеСтроки.ВидОперации = "Перемещение" Тогда
	//			ДанныеСтроки.СсылкаНаОперацию         = ПредопределенноеЗначение("Документ.Перемещение.ПустаяСсылка");
	//		ИначеЕсли ДанныеСтроки.ВидОперации = "Доход" Тогда
	//			ДанныеСтроки.СсылкаНаОперацию         = ПредопределенноеЗначение("Документ.Доход.ПустаяСсылка");
	//		Иначе
	//			ДанныеСтроки.СсылкаНаОперацию         = ПредопределенноеЗначение("Документ.Расход.ПустаяСсылка");
	//		КонецЕсли;
	//		
	//		ПроверитьРеквизитыОперацииПоСсылкеНаОперациюСервер(ДанныеСтроки.ПолучитьИдентификатор());
	//		
	//	ИначеЕсли ВыбранноеЗначение = "Создать" Тогда
	//		
	//		Оповещение = Новый ОписаниеОповещения("ВыборВидаОперацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	//		РаботаСФормамиДокументовКлиент.ПоказатьВыборВидаОперации("ВводИзменениеОстатка", Оповещение, ДанныеСтроки.ВидОперации);
	//		
	//	ИначеЕсли ВыбранноеЗначение = "Открыть" Тогда
	//		
	//		ДополнительныеПараметры = Новый Структура("СтрокаТаблицы", Элементы.ТаблицаОпераций.ТекущаяСтрока);
	//		ДополнительныеПараметры.Вставить("ВидОперации", ДанныеСтроки.ВидОперации);
	//		Оповещение = Новый ОписаниеОповещения("СозданиеНовойОперацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	//		ПоказатьОперацию(ДанныеСтроки.СсылкаНаОперацию, ДанныеСтроки.ВидОперации, Оповещение);
	//		
	//	ИначеЕсли ВыбранноеЗначение = "Очистить" Тогда
	//		
	//		НовоеЗначение = ?(ЗначениеЗаполнено(ДанныеСтроки.СуммаПоступления), "Автосоздание.Доход", "Автосоздание.Расход");
	//		ТаблицаОперацийСсылкаНаОперациюОбработкаВыбора(Элемент, НовоеЗначение, СтандартнаяОбработка);
	//		
	//	ИначеЕсли ВыбранноеЗначение = "Выбрать" Тогда
	//		
	//		Оповещение = Новый ОписаниеОповещения("ВыборОперацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	//		
	//		ПараметрыФормыВыбора = Новый Структура;
	//		ПараметрыФормыВыбора.Вставить("РежимВыбора", Истина);
	//		ОткрытьФорму("ЖурналДокументов.ОбщийЖурналДокументов.Форма.ФормаВыбораОперации", ПараметрыФормыВыбора, ЭтотОбъект, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОперацийСсылкаНаОперациюПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеСтроки = Элементы.ТаблицаОпераций.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ДанныеСтроки.СсылкаНаОперацию) Тогда
		
		ДополнительныеПараметры = Новый Структура("СтрокаТаблицы", Элементы.ТаблицаОпераций.ТекущаяСтрока);
		ДополнительныеПараметры.Вставить("ВидОперации", ДанныеСтроки.ВидОперации);
		Оповещение = Новый ОписаниеОповещения("СозданиеНовойОперацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьОперацию(ДанныеСтроки.СсылкаНаОперацию, ДанныеСтроки.ВидОперации, Оповещение);
		
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	ЗагрузитьФайлКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличныйДокумент(Команда)
	ОчисткаТабличногоДокумента();
КонецПроцедуры

&НаКлиенте
Процедура Прочитать(Команда)
	ПрочитатьТабличныйДокумент();
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаВыпискаБанка;
	Элементы.Прочитать.КнопкаПоУмолчанию = Элементы.СтраницыПодготовкиВыписки.ТекущаяСтраница = Элементы.СтраницаВыпискиФайл;
	Элементы.Прочитать1.КнопкаПоУмолчанию = Элементы.СтраницыПодготовкиВыписки.ТекущаяСтраница = Элементы.СтраницаВыпискиТаблица;
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНезагруженные(Команда)
	ИзменитьПометки(10);
КонецПроцедуры

&НаКлиенте
Процедура ПометитьВсе(Команда)
	ИзменитьПометки(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеПометки(Команда)
	ИзменитьПометки(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ИнвертироватьПометки(Команда)
	ИзменитьПометки(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОбновитьОперации(Команда)
	
	Если ВыполнитьПроверкуПометок() Тогда
		ВыполнитьЗагрузкуОперацийНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПравило(Команда)
	ОткрытьПравилоЧтения();
КонецПроцедуры

&НаКлиенте
Процедура Настройки(Команда)
	
	Оповещение = Новый ОписаниеОповещения("НастройкиЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.ЗагрузкаВыпискиБанка.Форма.Настройки", Новый Структура("СтруктураНастроек", СтруктураНастроек), , , , , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьПравило(Команда)
	
	Если Не ЗначениеЗаполнено(ПравилоЧтенияДокумента) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Не выбрано правило чтения выписки'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЗначениеКопирования", ПравилоЧтенияДокумента);
	ПараметрыФормы.Вставить("ТабличныйДокументВыписки", ТабличныйДокументВыписки);
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьПравилоЧтенияЗавершение", ЭтотОбъект, ПравилоЧтенияДокумента);
	
	ОткрытьФорму("Справочник.ПравилаЧтенияТабличныхДокументов.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект, ПравилоЧтенияДокумента, , , Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовоеПравило(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура);
 	ПараметрыФормы.Вставить("ТабличныйДокументВыписки", ТабличныйДокументВыписки);
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьПравилоЧтенияЗавершение", ЭтотОбъект, ПравилоЧтенияДокумента);
	
	ОткрытьФорму("Справочник.ПравилаЧтенияТабличныхДокументов.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект, ПравилоЧтенияДокумента, , , Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура УдалитьПравило(Команда)
	
	Если Не ЗначениеЗаполнено(ПравилоЧтенияДокумента) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Не выбрано правило чтения выписки'"));
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='Удалить правило чтения выписок ""%1""?'"); 
	ТекстВопроса = СтрШаблон(ТекстВопроса, Строка(ПравилоЧтенияДокумента));
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Удалить'")); 
	Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена'")); 
	
	Оповещение = Новый ОписаниеОповещения("УдалитьПравилоЗавершение", ЭтотОбъект, ПравилоЧтенияДокумента);
	ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, , КодВозвратаДиалога.Отмена, Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура ПосмотретьКлючевыеСловаОперации(Команда)
	
	ОткрытьСписокКлючевыхСлов();
	
КонецПроцедуры


#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ОбъектЭтойОбработки()

	Если ОбъектЭтойОбработки = Неопределено Тогда
		ОбъектЭтойОбработки = РеквизитФормыВЗначение("Объект");
	КонецЕсли;
	
	Возврат ОбъектЭтойОбработки;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция УправлениеЭлементамиСтраницыВыписки(Форма)

	Элементы = Форма.Элементы;
	РезультатПроверки = РезультатПроверкиДокументаВыписки(Форма);
	
	Если Элементы.ИзменитьПравило.Доступность <> РезультатПроверки.ПравилоУказано Тогда
		Элементы.ИзменитьПравило.Доступность     = РезультатПроверки.ПравилоУказано;
		Элементы.СкопироватьПравило.Доступность  = РезультатПроверки.ПравилоУказано;
		Элементы.УдалитьПравило.Доступность      = РезультатПроверки.ПравилоУказано;
	КонецЕсли;
	
	Если Элементы.Прочитать.Доступность <> РезультатПроверки.ДокументСоответствуетПравилу Тогда
		Элементы.Прочитать.Доступность  = РезультатПроверки.ДокументСоответствуетПравилу;
		Элементы.Прочитать.КнопкаПоУмолчанию = Элементы.СтраницыПодготовкиВыписки.ТекущаяСтраница = Элементы.СтраницаВыпискиФайл;
		Элементы.Прочитать1.Доступность = РезультатПроверки.ДокументСоответствуетПравилу;
		Элементы.Прочитать1.КнопкаПоУмолчанию = Элементы.СтраницыПодготовкиВыписки.ТекущаяСтраница = Элементы.СтраницаВыпискиТаблица;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура НастройкиЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СтруктураНастроек, Результат);
	КонецЕсли;

КонецПроцедуры


&НаСервереБезКонтекста
Функция НайтиБанкСчет(РСчетПредставление, РСчетКлючевоеСлово)
  	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НомерСчета", СокрЛП(РСчетПредставление));
	
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	БанковскиеСчета.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|ГДЕ
		|	БанковскиеСчета.НомерСчета = &НомерСчета";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;
 
КонецФункции

&НаСервереБезКонтекста
Функция НайтиКонтрагента(Представление, КлючевоеСлово)
  	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КодПоЕДРПОУ", СокрЛП(КлючевоеСлово));
	
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Контрагенты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.КодПоЕДРПОУ = &КодПоЕДРПОУ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;
 
КонецФункции

&НаКлиенте
Процедура ТаблицаОперацийВидОперацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ВидОперации", ВыбранноеЗначение);
	ДопПараметры.Вставить("КлючевоеСлово", Элементы.ТаблицаОпераций.ТекущиеДанные.НазначениеПлатежа);
	
	ОткрытьФорму("ОбщаяФорма.КБ_ФормаКлючевыхСлов", ДопПараметры, , , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры 


#Область ТабличныйДокументВыписки

&НаКлиентеНаСервереБезКонтекста
Процедура ВыделитьОбластиТабличногоДокумента(Форма)

	ТабличныйДокументВыписки = Форма.ТабличныйДокументВыписки;
	НастройкиЧтения          = Форма.НастройкиЧтения;
	Автоцвет = Новый Цвет;
	
	// Очищаем предвдущее выделение
	МассивОбластей = Новый Массив;
	Для каждого Область Из ТабличныйДокументВыписки.Области Цикл
		
		Если ТипЗнч(Область) <> Тип("ОбластьЯчеекТабличногоДокумента")
			Или Область.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;
		
		МассивОбластей.Добавить(Область);
		
	КонецЦикла;
	
	Для каждого Область Из МассивОбластей Цикл
		
		Если Область.Имя = "ВыделеннаяТаблицаВыписки" Тогда
			ПустаяЛиния = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
			Область.Обвести(ПустаяЛиния);
			ОбластьЦветЛинии = Автоцвет;
		КонецЕсли;
		
		Область.Примечание.Текст  = "";
		Область.ЦветУзора   = Автоцвет;
		Область.Узор        = ТипУзораТабличногоДокумента.БезУзора;
		Область.Имя = "";
		
	КонецЦикла;
	 
	
	Если ТабличныйДокументВыписки.ВысотаТаблицы = 0 Или Не ЗначениеЗаполнено(НастройкиЧтения) Тогда
		Возврат;
	КонецЕсли;
	
	// узор и цвет будут чередоваться, чтобы выделения не сливались
	ПервыйУзор = ТипУзораТабличногоДокумента.Узор2;
	ВторойУзор = ТипУзораТабличногоДокумента.Узор3;
	ТекущийУзор = ПервыйУзор;
	
	ПервыйЦвет = WebЦвета.НейтральноЗеленый;
	ВторойЦвет = WebЦвета.НейтральноВесеннеЗеленый;
	//ВторойЦвет = WebЦвета.СветлоЗолотистый;
	ТекущийЦвет = ПервыйЦвет;
	
	// Выделяем таблицу
	Если ЗначениеЗаполнено(НастройкиЧтения[0].ПоложениеПоказателя) Тогда
		
		Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.БольшойПунктир, 3);
		ОбластьЦветЛинии = WebЦвета.Золотистый;
		Область = ТабличныйДокументВыписки.Область(НастройкиЧтения[0].ПоложениеПоказателя + ":" + НастройкиЧтения[0].КонечнаяОбласть);
		Область.Обвести(Линия);
		Область.Имя = "ВыделеннаяТаблицаВыписки";
		Область.Примечание.Текст = НастройкиЧтения[0].Наименование + Символы.ПС + НастройкиЧтения[0].Комментарий;
		
	КонецЕсли;
	
	// Выделяем прочие показатели
	Для каждого СтрокаНастройки Из НастройкиЧтения Цикл
		
		Если СтрокаНастройки.КлючПоказателя = "НачалоТаблицы" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаНастройки.ПоложениеПоказателя) Тогда
			
			ОбластиПоказателя = МассивОбластейПоказателя(СтрокаНастройки.ПоложениеПоказателя, СтрокаНастройки.КонечнаяОбласть, ТабличныйДокументВыписки);
			Счетчик = 1;
			Для каждого Область Из ОбластиПоказателя Цикл
				
				Суффикс = ?(ОбластиПоказателя.Количество() = 1, "", Формат(Счетчик, "ЧДЦ=; ЧГ=") );
				Область.Имя         = ?(ТипЗнч(СтрокаНастройки.КлючПоказателя) = Тип("Строка"), СтрокаНастройки.КлючПоказателя, "Аналитика" + Формат(Счетчик, "ЧДЦ=; ЧГ=")) + Суффикс;
				Область.Примечание.Текст  = Область.Примечание.Текст + ?(Область.Примечание.Текст = "", "", Символы.ПС + Символы.ПС)
									+ СтрокаНастройки.Наименование + Символы.ПС + СтрокаНастройки.Комментарий;
				ТекущийЦвет = ?(ТекущийЦвет = ПервыйЦвет, ВторойЦвет, ПервыйЦвет);
				Область.ЦветУзора   = ТекущийЦвет;
				ТекущийУзор = ?(ТекущийУзор = ПервыйУзор, ВторойУзор, ПервыйУзор);
				Область.Узор        = ТекущийУзор;
				
				Счетчик = Счетчик + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	

КонецПроцедуры

&НаСервере
Процедура ОчисткаТабличногоДокумента()
	
	ТабличныйДокументВыписки.Очистить();
	ОбновитьКонечныеОбластиНастройкиЧтения(НастройкиЧтения, ТабличныйДокументВыписки);
	ВыделитьОбластиТабличногоДокумента(ЭтотОбъект);
	
КонецПроцедуры

// Вычисляет конечные области в табличном документе выписки: 
//	для каждой колонки корректируется начальная и конечная строка таблицы
//	для одиночных значений конечная область равна начальной
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьКонечныеОбластиНастройкиЧтения(НастройкиЧтения, ТабличныйДокументВыписки)

	Если НастройкиЧтения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПоложениеТаблицы      = НастройкиЧтения[0].ПоложениеПоказателя;
	ТабличныйДокументПуст = ТабличныйДокументВыписки.ВысотаТаблицы = 0;
	
	Если Не ЗначениеЗаполнено(ПоложениеТаблицы) Или ТабличныйДокументПуст Тогда
		
		ОбластьТаблицы   = ТабличныйДокументВыписки.Область(1,1);
		НачальнаяСтрока  = 1;
		НачальнаяКолонка = 1;
		КонечнаяСтрока   =  1;
		КонечнаяКолонка  =  1;
		
	Иначе
		
		ОбластьНачала    = ТабличныйДокументВыписки.Область(ПоложениеТаблицы);
		НачальнаяСтрока  = ОбластьНачала.Верх;
		НачальнаяКолонка = ОбластьНачала.Лево;
		
		КонечнаяСтрока  = НачальнаяСтрока;
		КонечнаяКолонка = ТабличныйДокументВыписки.ШиринаТаблицы;
		
		// вычисляем конечные строку и колонку таблицы
		Если ТабличныйДокументВыписки.ВысотаТаблицы > 1  Тогда
			
			// Первая пустая строка соответствует окончанию таблицы
			Для Счетчик = НачальнаяСтрока По ТабличныйДокументВыписки.ВысотаТаблицы Цикл
				Если Не ЗначениеЗаполнено(ТабличныйДокументВыписки.Область(Счетчик, НачальнаяКолонка).Текст)
					Или Счетчик = ТабличныйДокументВыписки.ВысотаТаблицы Тогда
					КонечнаяСтрока = Макс(1, Счетчик - ?(Счетчик = ТабличныйДокументВыписки.ВысотаТаблицы, 0, 1));
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			// Вычисляем конечную колонку с учетом необязательности заполнения всех колонок
			ПраваяКолонка = ТабличныйДокументВыписки.ШиринаТаблицы;
			Пока ПраваяКолонка >= НачальнаяКолонка Цикл
				
				Для СчетчикСтрок = НачальнаяСтрока По КонечнаяСтрока Цикл
					
					Если ЗначениеЗаполнено(ТабличныйДокументВыписки.Область(СчетчикСтрок, ПраваяКолонка).Текст) Тогда
						КонечнаяКолонка = ПраваяКолонка;
						ПраваяКолонка = НачальнаяКолонка;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
				ПраваяКолонка = ПраваяКолонка - 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Определяем область таблицы
		ОбластьТаблицы = ТабличныйДокументВыписки.Область(НачальнаяСтрока, НачальнаяКолонка, КонечнаяСтрока, КонечнаяКолонка);
		
	КонецЕсли;
	
	НастройкиЧтения[0].КонечнаяОбласть = "R" + Формат(КонечнаяСтрока, "ЧДЦ=; ЧН=0; ЧГ=") + "C" + Формат(КонечнаяКолонка, "ЧДЦ=; ЧН=0; ЧГ=");
	
	// Вычисляем конечные области для прочих показателей
	ПределСчетчика = НастройкиЧтения.Количество() - 1;
	Для Счетчик = 1  По ПределСчетчика Цикл
		
		СтрокаНастройки = НастройкиЧтения[Счетчик];
		СтрокаНастройки.КонечнаяОбласть = "";
		
		Если Не ТабличныйДокументПуст И ЗначениеЗаполнено(СтрокаНастройки.ПоложениеПоказателя) Тогда
			
			// Показатель может располагаться в нескольких колонках
			МассивАдресов = СтрРазделить(СтрокаНастройки.ПоложениеПоказателя, ";", Ложь);
			НачалоПоказателя    = "";
			ОкончаниеПоказателя = "";
			
			Для каждого АдресНачала Из МассивАдресов Цикл
				
				ОбластьПоказателя = ТабличныйДокументВыписки.Область(АдресНачала);
				
				Если ОбластьПринадлежитИсходной(ОбластьПоказателя, ОбластьТаблицы) Тогда
					
					// первая строка показателя-колонки должна равняться первой строке таблицы
					НачалоПоказателя    = НачалоПоказателя + ?(НачалоПоказателя = "", "", ";")
										+ "R" + Формат(НачальнаяСтрока, "ЧДЦ=; ЧН=0; ЧГ=") + "C" + Формат(ОбластьПоказателя.Лево, "ЧДЦ=; ЧН=0; ЧГ=");
					// заканчивается область на последней стркое таблицы
					ОкончаниеПоказателя = ОкончаниеПоказателя + ?(ОкончаниеПоказателя = "", "", ";") 
										+ "R" + Формат(КонечнаяСтрока, "ЧДЦ=; ЧН=0; ЧГ=") + "C" + Формат(ОбластьПоказателя.Право, "ЧДЦ=; ЧН=0; ЧГ=");
					
				Иначе
					
					НачалоПоказателя    = НачалоПоказателя + ?(НачалоПоказателя = "", "", ";") 
										+ "R" + Формат(ОбластьПоказателя.Верх, "ЧДЦ=; ЧН=0; ЧГ=") + "C" + Формат(ОбластьПоказателя.Лево, "ЧДЦ=; ЧН=0; ЧГ=");
					ОкончаниеПоказателя = ОкончаниеПоказателя + ?(ОкончаниеПоказателя = "", "", ";") 
										+ "R" + Формат(ОбластьПоказателя.Низ, "ЧДЦ=; ЧН=0; ЧГ=") + "C" + Формат(ОбластьПоказателя.Право, "ЧДЦ=; ЧН=0; ЧГ=");
					
				КонецЕсли;
				
			КонецЦикла;
			
			СтрокаНастройки.ПоложениеПоказателя = НачалоПоказателя;
			СтрокаНастройки.КонечнаяОбласть     = ОкончаниеПоказателя;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОбластьПринадлежитИсходной(СравниваемаяОбласть, ИсходнаяОбласть)

	Возврат  СравниваемаяОбласть.Верх >= ИсходнаяОбласть.Верх
			И СравниваемаяОбласть.Лево >= ИсходнаяОбласть.Лево
			И СравниваемаяОбласть.Низ <= ИсходнаяОбласть.Низ
			И СравниваемаяОбласть.Право <= ИсходнаяОбласть.Право

КонецФункции

&НаКлиенте
Процедура ТабличныйДокументВыпискиПриИзмененииКлиент()

	ОбновитьКонечныеОбластиНастройкиЧтения(НастройкиЧтения, ТабличныйДокументВыписки);
	ВыделитьОбластиТабличногоДокумента(ЭтотОбъект);
	УправлениеЭлементамиСтраницыВыписки(ЭтотОбъект);

КонецПроцедуры


#КонецОбласти


#Область НастройкиЧтения

&НаСервере
Процедура ПриИзмененииПравилаЧтенияСервер()

	НастройкиЧтения.Загрузить(ПолучитьНастройкиЧтения(ПравилоЧтенияДокумента));
	ОбновитьКонечныеОбластиНастройкиЧтения(НастройкиЧтения, ТабличныйДокументВыписки);
	ВыделитьОбластиТабличногоДокумента(ЭтотОбъект);
	УправлениеЭлементамиСтраницыВыписки(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура УдалитьПравилоСервер(УдаляемоеПравило)

	УдаляемоеПравило.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
	
	Если УдаляемоеПравило = ПравилоЧтенияДокумента Тогда
		ПравилоЧтенияДокумента = Неопределено;
		ПриИзмененииПравилаЧтенияСервер();
	КонецЕсли;

КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьНастройкиЧтения(ПравилоЧтения)

	Если ЗначениеЗаполнено(ПравилоЧтения) Тогда
		ТаблицаНастроек = Справочники.ПравилаЧтенияТабличныхДокументов.СписокПоказателейПравила(ПравилоЧтения);
	Иначе
		ТаблицаНастроек = Справочники.ПравилаЧтенияТабличныхДокументов.НовыйСписокПоказателейЗагружаемогоДокумента();
	КонецЕсли;
	
	Возврат ТаблицаНастроек;

КонецФункции

&НаКлиенте
Процедура ОткрытьПравилоЧтения()

	Если Не ЗначениеЗаполнено(ПравилоЧтенияДокумента) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Не выбрано правило чтения выписки'")); 
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Ключ", ПравилоЧтенияДокумента);
	ПараметрыФормы.Вставить("ТабличныйДокументВыписки", ТабличныйДокументВыписки);
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьПравилоЧтенияЗавершение", ЭтотОбъект, ПравилоЧтенияДокумента);
	
	ОткрытьФорму("Справочник.ПравилаЧтенияТабличныхДокументов.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект, ПравилоЧтенияДокумента, , , Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПравилоЧтенияЗавершение(Правило, ДополнительныеПараметры) Экспорт

	Если Не ЗначениеЗаполнено(Правило) Тогда
		Возврат;
	КонецЕсли;
	
	ПравилоЧтенияДокумента = Правило;
	ПриИзмененииПравилаЧтенияСервер();

КонецПроцедуры

&НаКлиенте
Процедура УдалитьПравилоЗавершение(Ответ, УдаляемоеПравило) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		УдалитьПравилоСервер(УдаляемоеПравило);
	КонецЕсли;

КонецПроцедуры


#КонецОбласти


#Область ОткрытиеФайла

&НаКлиенте
Процедура ЗагрузитьФайлКлиент()

	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ФайловыеФункции") Тогда
			МодульФайловыеФункцииСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ФайловыеФункцииСлужебныйКлиент");
			ПутьКФайлу = МодульФайловыеФункцииСлужебныйКлиент.КаталогМоиДокументы();
		Иначе
			ПутьКФайлу = ПолноеИмяФайла;
		КонецЕсли;
		
		ДиалогВыбораФайла = ПолучитьДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие, ПутьКФайлу, "");
		Оповещение = Новый ОписаниеОповещения("ЗагрузитьФайлКлиентЗавершение", ЭтотОбъект);
		ДиалогВыбораФайла.Показать(Оповещение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлКлиентЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт

	Если ВыбранныеФайлы = Неопределено Или ВыбранныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныйФайл     = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ВыбранныеФайлы[0]);
	ТекущееРасширение = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ВыбранныйФайл.Расширение);
	Если ЗначениеЗаполнено(ВыбранныйФайл.Имя) Тогда
		ПолноеИмяФайла = ВыбранныйФайл.ПолноеИмя;
	Иначе
		Возврат;
	КонецЕсли;

	АдресВременногоХранилища = "";
	Оповещение = Новый ОписаниеОповещения("ПриОкончаниеПомещенияФайла", ЭтотОбъект);
	НачатьПомещениеФайла(Оповещение, АдресВременногоХранилища, ПолноеИмяФайла, Ложь);

КонецПроцедуры

&НаКлиенте
Функция ПолучитьДиалогВыбораФайла(РежимДиалога, ПутьКФайлу, ИмяФайла = "")
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалога);
	
	ДиалогВыбораФайла.Фильтр       = СтрокаФильтраПоРасширениюФайла(ТекущееРасширение, ДиалогВыбораФайла.ИндексФильтра);
	
	Если Не ПустаяСтрока(ТекущееРасширение) Тогда
		ДиалогВыбораФайла.Расширение = ТекущееРасширение;
	КонецЕсли;
		
	ДиалогВыбораФайла.Заголовок                   = Заголовок;
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПолноеИмяФайла              = ИмяФайла;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = РежимДиалога = РежимДиалогаВыбораФайла.Открытие;
	
	Возврат ДиалогВыбораФайла;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаФильтраПоРасширениюФайла(ВыбранноеРасширение, ИндексВыбранногоРасширения)

	ОписаниеРасширения = НСтр("ru='Книга Excel 2007 (*.xlsx)|*.xlsx'")
			+ "|" + НСтр("ru='Книга Excel 97 (*.xls)|*.xls'")
			+ "|" + НСтр("ru='Таблица OpenDocument (*.ods)|*.ods'")
			+ "|" + НСтр("ru='Текстовый документ c разделителями (*.csv)|*.csv'")
			+ "|" + НСтр("ru='Табличный документ 1С:Предприятия (*.mxl)|*.mxl'")
			+ "|" + НСтр("ru='dbf файл по типу профикс (*.dbf)|*.dbf'");
			

	Если ВыбранноеРасширение = "xlsx" Тогда
		ИндексВыбранногоРасширения = 0;
	ИначеЕсли ВыбранноеРасширение = "xls" Тогда
		ИндексВыбранногоРасширения = 1;
	ИначеЕсли ВыбранноеРасширение = "ods" Тогда
		ИндексВыбранногоРасширения = 2;
	ИначеЕсли ВыбранноеРасширение = "csv" Тогда
		ИндексВыбранногоРасширения = 3;
	ИначеЕсли ВыбранноеРасширение = "mxl" Тогда
		ИндексВыбранногоРасширения = 4;
	ИначеЕсли ВыбранноеРасширение = "dbf" Тогда
		ИндексВыбранногоРасширения = 5;
	Иначе
		ИндексВыбранногоРасширения = 0;
	КонецЕсли;
	 
	Возврат ОписаниеРасширения;
	
КонецФункции

&НаКлиенте
Процедура ПриОкончаниеПомещенияФайла(Результат, АдресВременногоХранилища, ИмяФайла, Параметр) Экспорт
	
	Если Результат = Истина Тогда
		
		Если Найти(СтрокаФильтраПоРасширениюФайла("",0), "*." + ТекущееРасширение) > 0 Тогда
			
			ФоновоеЗадание = Ложь;
			ЗагрузитьФайлСДаннымиВТабличныйДокументНаСервере(АдресВременногоХранилища, ТекущееРасширение, ФоновоеЗадание);
			Если ФоновоеЗадание Тогда
				
				ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
				ПодключитьОбработчикОжидания("ФоновоеЗаданиеЗагрузкаФайлаНаКлиенте", 1, Истина);
				ПараметрыОбработчика.МаксимальныйИнтервал = 5;
				ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ФоновоеЗаданиеИдентификатор);
				
			Иначе
				
				ТабличныйДокументВыпискиПриИзмененииКлиент();
				
			КонецЕсли;
			
		Иначе
			
			ПоказатьПредупреждение(,НСтр("ru ='Не получилось загрузить данные из выбранного файла. Убедитесь в корректности его содержимого.'"));
			
		КонецЕсли;
		
		ОбновитьКонечныеОбластиНастройкиЧтения(НастройкиЧтения, ТабличныйДокументВыписки);
		ВыделитьОбластиТабличногоДокумента(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьФайлСДаннымиВТабличныйДокументНаСервере(АдресВременногоХранилища, Расширение, ФоновоеЗадание = Ложь)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	ДвоичныеДанные     = ПолучитьИЗВременногоХранилища(АдресВременногоХранилища);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ОчисткаТабличногоДокумента();

	ПараметрыВызоваСервера = Новый Структура();
	ПараметрыВызоваСервера.Вставить("Расширение",         Расширение);
	ПараметрыВызоваСервера.Вставить("ТабличныйДокумент",  ТабличныйДокументВыписки);
	ПараметрыВызоваСервера.Вставить("ИмяВременногоФайла", ИмяВременногоФайла);
	
	ФоновоеЗаданиеАдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	ОбъектЭтойОбработки().ЗагрузитьФайлВТаблицу(ПараметрыВызоваСервера, ФоновоеЗаданиеАдресХранилища);
	ТабличныйДокументВыписки = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
	
КонецПроцедуры

&НаКлиенте
Процедура ФоновоеЗаданиеЗагрузкаФайлаНаКлиенте()
	
	Результат = ФоновоеЗаданиеЗагрузкаФайлаПолучитьРезультат();
	Если Результат.ФоновоеЗаданиеВыполнено Тогда
		
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ФоновоеЗаданиеИдентификатор Тогда
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		КонецЕсли;
		
		ТабличныйДокументВыписки = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
		ТабличныйДокументВыпискиПриИзмененииКлиент();
		
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеЗагрузкаФайлаНаКлиенте", ПараметрыОбработчика.ТекущийИнтервал, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ФоновоеЗаданиеЗагрузкаФайлаПолучитьРезультат()
	
	Результат = Новый Структура;
	Результат.Вставить("ФоновоеЗаданиеВыполнено", Ложь);
	Результат.ФоновоеЗаданиеВыполнено = ДлительныеОперации.ЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор);
	Возврат Результат;
	
КонецФункции


#КонецОбласти


#Область ЧтениеВыписки

&НаКлиентеНаСервереБезКонтекста
Функция РезультатПроверкиДокументаВыписки(Знач Форма)

	НастройкиЧтения          = Форма.НастройкиЧтения;
	ТабличныйДокументВыписки = Форма.ТабличныйДокументВыписки;
	
	Результат = Новый Структура("ПравилоУказано,ДокументЗаполнен,ДокументСоответствуетПравилу, СписокПроблем", 
				Истина, Истина, Истина, Новый Массив);
	
	Если Не ЗначениеЗаполнено(Форма.ПравилоЧтенияДокумента) Тогда
		Результат.ПравилоУказано = Ложь;
		Результат.ДокументСоответствуетПравилу = Ложь;
		Результат.СписокПроблем.Добавить(НСтр("ru='Не указано правило чтения выписки'"));
	КонецЕсли;
	
	Если ТабличныйДокументВыписки.ВысотаТаблицы = 0 Тогда
		Результат.ДокументЗаполнен = Ложь;
		Результат.ДокументСоответствуетПравилу = Ложь;
		Результат.СписокПроблем.Добавить(НСтр("ru='Таблица выписки пуста'"));
	КонецЕсли;
	
	Если Не Результат.ПравилоУказано Или Не Результат.ДокументЗаполнен Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Дата операции не может быть пустой
	Если Не ЯчейкиПоказателяКорректны("Дата", НастройкиЧтения, ТабличныйДокументВыписки) Тогда
		Результат.ДокументСоответствуетПравилу = Ложь;
		Результат.СписокПроблем.Добавить(НСтр("ru='Не заданы или не содержат текст ячейки для даты'"));
	КонецЕсли;
	
	// Должно быть указано одно из следующих полей:
	КошелекУказан = ЯчейкиПоказателяКорректны("Кошелек",           НастройкиЧтения, ТабличныйДокументВыписки);
	СтатьяУказана = ЯчейкиПоказателяКорректны("СтатьяДолг",        НастройкиЧтения, ТабличныйДокументВыписки);
	ЕстьОписание  = ЯчейкиПоказателяКорректны("ОписаниеОперации",  НастройкиЧтения, ТабличныйДокументВыписки);
	Если Не КошелекУказан И Не СтатьяУказана И Не ЕстьОписание Тогда
		Результат.ДокументСоответствуетПравилу = Ложь;
		Результат.СписокПроблем.Добавить(НСтр("ru='Ячейки для определения кошелька и статьи не заданы или не содержат текст'"));
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЯчейкиПоказателяКорректны(КлючПоказателя, НастройкиЧтения, ТабличныйДокументВыписки, ДопускаетсяОтсутствие = Ложь)

	СтрокиНастройки = НастройкиЧтения.НайтиСтроки(Новый Структура("КлючПоказателя", КлючПоказателя));
	Если СтрокиНастройки.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтрокаПоказателя = СтрокиНастройки[0];
	Если ЗначениеЗаполнено(СтрокаПоказателя.ПоложениеПоказателя) Тогда
		
		МассивОбластей = МассивОбластейПоказателя(СтрокаПоказателя.ПоложениеПоказателя, СтрокаПоказателя.КонечнаяОбласть, ТабличныйДокументВыписки);
		КоличествоСтрок = 0;
		Для каждого Область Из МассивОбластей Цикл
			СтрокОбласти = Область.Низ - Область.Верх + 1;
			Если СтрокОбласти > КоличествоСтрок Тогда
				КоличествоСтрок = СтрокОбласти;
			КонецЕсли;
		КонецЦикла;
		
		Для Счетчик = 1 По КоличествоСтрок Цикл
			
			ТекстПоказателя = ТекстПоказателяЯчеекПоНомеруСтроки(Счетчик, МассивОбластей, ТабличныйДокументВыписки);
			Если Не ПустаяСтрока(ТекстПоказателя) Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		Возврат ДопускаетсяОтсутствие;
	КонецЕсли;

	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МассивОбластейПоказателя(ПоложениеПоказателя, КонечнаяОбласть, ТабличныйДокументВыписки)

	Результат = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ПоложениеПоказателя) Тогда
		Возврат Результат;
	КонецЕсли;
	
	МассивНачалОбластей  = СтрРазделить(ПоложениеПоказателя, ";");
	МассивКонцовОбластей = СтрРазделить(КонечнаяОбласть, ";");
	Для Счетчик = 0 По МассивНачалОбластей.Количество() - 1 Цикл
		
		Результат.Добавить(ТабличныйДокументВыписки.Область(МассивНачалОбластей[Счетчик] + ":" + МассивКонцовОбластей[Счетчик]));
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстПоказателяЯчеекПоНомеруСтроки(НомерСтроки, МассивОбластейПоказателя, ТабличныйДокументВыписки)

	ТекстПоказателя = "";
	
	Для каждого Область Из МассивОбластейПоказателя Цикл
		
		Если Область.Лево = Область.Право И Область.Верх = Область.Низ Тогда
			ТекстПоказателя = ТекстПоказателя + ?(ТекстПоказателя = "", "", " ") + Область.Текст;
		Иначе
			
			НомерСтрокиПоказателя = Область.Верх + НомерСтроки - 1;
			ТекстПоказателя = ТекстПоказателя + ?(ТекстПоказателя = "", "", " ") 
						+ ТабличныйДокументВыписки.Область(НомерСтрокиПоказателя, Область.Лево).Текст;
		КонецЕсли;
		
	КонецЦикла;

	Возврат СокрЛП(ТекстПоказателя);
	
КонецФункции

&НаКлиенте
Процедура ПрочитатьТабличныйДокумент()

	ФоновоеЗадание = Ложь;
	ПрочитатьТабличныйДокументНаСервере(ФоновоеЗадание);
	
	Если ФоновоеЗадание Тогда
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеЧтениеТабличногоДокумента", 1, Истина);
		ПараметрыОбработчика.МаксимальныйИнтервал = 5;
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ФоновоеЗаданиеИдентификатор);
		
	Иначе
		
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаСписокОпераций;
		ПроверкаРезультатаЧтенияФайлаКлиент();
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПрочитатьТабличныйДокументНаСервере(ФоновоеЗадание)

	ПараметрыВызоваСервера = Новый Структура();
	ПараметрыВызоваСервера.Вставить("ТабличныйДокумент",  ТабличныйДокументВыписки);
	ПараметрыВызоваСервера.Вставить("НастройкиЧтения", НастройкиЧтения.Выгрузить());
	
	ФоновоеЗаданиеАдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	ОбъектЭтойОбработки().ПрочитатьТабличныйДокумент(ПараметрыВызоваСервера, ФоновоеЗаданиеАдресХранилища);
	
	ЧтениеТабличногоДокументаОбработатьРезультат();
	
КонецПроцедуры

&НаКлиенте
Процедура ФоновоеЗаданиеЧтениеТабличногоДокумента()
	
	Результат = ФоновоеЗаданиеЧтениеТабличногоДокументаПолучитьРезультат();
	Если Результат.ФоновоеЗаданиеВыполнено Тогда
		
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ФоновоеЗаданиеИдентификатор Тогда
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		КонецЕсли;
		ЧтениеТабличногоДокументаОбработатьРезультат();
		ПроверкаРезультатаЧтенияФайлаКлиент();
		
	Иначе
		
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеЧтениеТабличногоДокумента", ПараметрыОбработчика.ТекущийИнтервал, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ФоновоеЗаданиеЧтениеТабличногоДокументаПолучитьРезультат()
	
	Результат = Новый Структура;
	Результат.Вставить("ФоновоеЗаданиеВыполнено", Ложь);
	Результат.ФоновоеЗаданиеВыполнено = ДлительныеОперации.ЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор);
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЧтениеТабличногоДокументаОбработатьРезультат()

	РезультатЧтения = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
	
	Объект.ТаблицаОпераций.Очистить();
	
	Для каждого СтрокаРезультата Из РезультатЧтения Цикл
		
		// Добавляем строку операции
		НоваяСтрока = Объект.ТаблицаОпераций.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРезультата);
		
		// Обновляем представление объектов и операции
		НоваяСтрока.Рсчет = НайтиБанкСчет(СтрокаРезультата.РСчетПредставление, СтрокаРезультата.РСчетКлючевоеСлово);		
		НоваяСтрока.РСчетКонтрагент = НайтиБанкСчет(СтрокаРезультата.РСчетКонтрагентПредставление, СтрокаРезультата.РСчетКонтрагентКлючевоеСлово);
		
		Если ЗначениеЗаполнено(НоваяСтрока.РСчетКонтрагент) Тогда
			НоваяСтрока.Контрагент = кс_ОбщегоНазначенияКлиентСервер.ПолучитьЗначениеРеквизита(НоваяСтрока.РСчетКонтрагент, "Владелец");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НоваяСтрока.ЕДРПОУКонтрагент) Тогда
			лКонтрагентПроверка = НайтиКонтрагента(НоваяСтрока.КонтрагентФайл, НоваяСтрока.ЕДРПОУКонтрагент);
			Если Не ЗначениеЗаполнено(НоваяСтрока.Контрагент) Тогда
				НоваяСтрока.Контрагент = лКонтрагентПроверка;	
			ИначеЕсли НоваяСтрока.Контрагент <> лКонтрагентПроверка И ЗначениеЗаполнено(лКонтрагентПроверка) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(""+НоваяСтрока.НомерСтроки+":"+лКонтрагентПроверка + "<>" + НоваяСтрока.Контрагент);
			Иначе	
				// ?
				
			КонецЕсли;			
		КонецЕсли;
		
		
		Если НоваяСтрока.СуммаСписания > 0 Тогда
 			ТипСтатьи = Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийРасходСоСчета");
			НоваяСтрока.ВидОперации = ТипСтатьи.ПривестиЗначение(НоваяСтрока.ВидОперации);
			
		Иначе
			ТипСтатьи = Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийПоступлениеНаСчет");
			НоваяСтрока.ВидОперации = ТипСтатьи.ПривестиЗначение(НоваяСтрока.ВидОперации);
 		КонецЕсли;		
		
		// Обновляем иконки объектов в строке
		Если Не ЗначениеЗаполнено(НоваяСтрока.РСчет) Тогда
			НоваяСтрока.КошелекИконка = БиблиотекаКартинок.СоздатьЭлементСписка;
		КонецЕсли;
  		 
		Если ЗначениеЗаполнено(НоваяСтрока.СсылкаНаОперацию) Тогда
			НоваяСтрока.НоваяОперация = 0;			
		Иначе
			НоваяСтрока.НоваяОперация = 1;
			НоваяСтрока.СсылкаНаОперациюИконка = БиблиотекаКартинок.СоздатьЭлементСписка;
		КонецЕсли;
		 
		// заполняем строки аналитики
		//НоваяСтрока.Аналитика.Загрузить(СтрокаРезультата.Аналитика); 
		
	КонецЦикла;
	
	ФильтрТаблицыОпераций = "Все";
	ПриИзмененииФильтраТаблицыОпераций(Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПроверкаРезультатаЧтенияФайлаКлиент()

	Если Объект.ТаблицаОпераций.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru='Из указанного файла не удалось получить список операций.
			|Проверьте корректность указанного файла и правила его чтения'");
		ПоказатьПредупреждение(, ТекстПредупреждения, , Заголовок);
		Элементы.ЗагрузитьСписокОпераций.КнопкаПоУмолчанию = Ложь;
	Иначе
		Элементы.ЗагрузитьСписокОпераций.КнопкаПоУмолчанию = Истина;
	КонецЕсли;

КонецПроцедуры
 

#КонецОбласти


#Область ТаблицаОпераций

&НаКлиенте
Процедура ИзменитьПометки(ЗначениеПометки)

	Для каждого СтрокаОперации Из Объект.ТаблицаОпераций Цикл
		
		Если ЗначениеПометки = 10 Тогда
			СтрокаОперации.Загружать = Не ЗначениеЗаполнено(СтрокаОперации.СсылкаНаОперацию);
		ИначеЕсли ЗначениеПометки = Неопределено Тогда
			СтрокаОперации.Загружать = Не СтрокаОперации.Загружать;
		Иначе
			СтрокаОперации.Загружать = ЗначениеПометки;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры
 
&НаСервереБезКонтекста
Функция ЗаписатьКлючевоеСловоОъекта(КлючевоеСлово, Объект, ЭтоПоступление)

	Результат = Новый Структура("Записано, СуществующийОбъект", Истина);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(ТипЗнч(Объект));
	ОписаниеТипаОбъекта = Новый ОписаниеТипов(МассивТипов);
	Родитель = Неопределено;
	Владелец = Неопределено;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Родитель")
		И Объект.Метаданные().Иерархический Тогда
		Родитель = Объект.Родитель;
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Владелец")
		И Объект.Метаданные().Владельцы.Количество() > 0 Тогда
		Владелец = Объект.Владелец;
	КонецЕсли;
	
	//ИскомыеОбъекты = РегистрыСведений.КлючевыеСловаОбъектов.СписокОбъектовПоКлючевомуСлову(КлючевоеСлово, ОписаниеТипаОбъекта, Родитель, Владелец);
	//Для каждого СтрокаОбъекта Из ИскомыеОбъекты Цикл
	//	Если ЭтоПоступление И ТипЗнч(СтрокаОбъекта.Объект) <> Тип("СправочникСсылка.СтатьиРасходов")
	//		Или Не ЭтоПоступление И ТипЗнч(СтрокаОбъекта.Объект) <> Тип("СправочникСсылка.СтатьиДоходов") Тогда
	//		Результат.Записано           =  СтрокаОбъекта.Объект = Объект;
	//		Результат.СуществующийОбъект =  СтрокаОбъекта.Объект;
	//		Возврат Результат;
	//	КонецЕсли;
	//КонецЦикла;
	//
	РегистрыСведений.КлючевыеСловаОбъектов.ЗаписатьКлючевоеСловоОбъекта(КлючевоеСлово, Объект);
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаменитьКлючевоеСловоОбъекта(ПараметрыЗаписи)

	РегистрыСведений.КлючевыеСловаОбъектов.ЗаписатьКлючевоеСловоОбъекта(ПараметрыЗаписи.КлючевоеСлово, ПараметрыЗаписи.Объект);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСсылкиВТаблицеОпераций(ТаблицаОпераций, ВидОперации, ИмяПоля, КлючевоеСлово, НовоеЗначение, ПредставленияВидовОпераций, ЗаменятьСуществующиеСсылки = Истина)

	// Обновляем кошелек в строках с такми же текстом. как в измененной строке
	Если ИмяПоля = "Кошелек" Тогда
		
		// Кошелек изменяем в строках без учета вида операций
		СтрокиОпераций = ТаблицаОпераций.НайтиСтроки(Новый Структура(ИмяПоля + "КлючевоеСлово", КлючевоеСлово));
		
	Иначе
		
		// При изменении статьи, долга и проч. учитываем вид операции
		СтрокиОпераций = ТаблицаОпераций.НайтиСтроки(Новый Структура("ВидОперации," + ИмяПоля + "КлючевоеСлово", ВидОперации, КлючевоеСлово));
		
	КонецЕсли;
	
	ПустаяКартинка = Новый Картинка;
	Для каждого СтрокаОперации Из СтрокиОпераций Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаОперации.СсылкаНаОперацию) 
			И (ЗаменятьСуществующиеСсылки Или Не ЗначениеЗаполнено(СтрокаОперации[ИмяПоля])) Тогда
			
			СтрокаОперации[ИмяПоля] = НовоеЗначение;
			СтрокаОперации[ИмяПоля + "Иконка"] = ?(ЗначениеЗаполнено(НовоеЗначение), ПустаяКартинка, БиблиотекаКартинок.БыстроСоздатьЭлементСписка);
			
		КонецЕсли;
		
		Если ИмяПоля = "СтатьяДолг" И ЗначениеЗаполнено(НовоеЗначение) Тогда
			ПроверитьРеквизитыОперацииПоТипуСтатьиДолга(ТаблицаОпераций, СтрокаОперации.ПолучитьИдентификатор(), ПредставленияВидовОпераций);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаменыОбъектаЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаменитьКлючевоеСловоОбъекта(ДополнительныеПараметры);
		ДанныеСтроки = Объект.ТаблицаОпераций.НайтиПоИдентификатору(ДополнительныеПараметры.ИДСтроки);
		ОбновитьСсылкиВТаблицеОпераций(Объект.ТаблицаОпераций, ДанныеСтроки.ВидОперации, ДополнительныеПараметры.ИмяПоля, 
					ДанныеСтроки[ДополнительныеПараметры.ИмяПоля + "КлючевоеСлово"], ДанныеСтроки[ДополнительныеПараметры.ИмяПоля], 
					ПредставленияВидовОпераций, Истина);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверитьРеквизитыОперацииПоСсылкеНаОперациюСервер(ИДСтроки, ЗаменятьСуществующиеСтатьиИКошельки = Истина)

	ПриИзмененииФильтраТаблицыОпераций();

КонецПроцедуры
 

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьРеквизитыОперацииПоТипуСтатьиДолга(ТаблицаОпераций, ИДСтроки, ПредставленияВидовОпераций)

	ДанныеСтроки = ТаблицаОпераций.НайтиПоИдентификатору(ИДСтроки);
	
	ТипСтатьиДолга = ТипЗнч(ДанныеСтроки.СтатьяДолг);
	Если Не ТипСтатьиДолга = Тип("Неопределено") Тогда
		
		Если ТипСтатьиДолга = Тип("СправочникСсылка.КошелькиИСчета") 
			И ДанныеСтроки.ВидОперации <> "Перемещение" И ДанныеСтроки.ВидОперации <> "ОбменВалюты" И ДанныеСтроки.ВидОперации <> "УниверсальнаяОперация" Тогда
			
			ДанныеСтроки.ВидОперации = "Перемещение";
			ДанныеСтроки.СсылкаНаОперацию = ПредопределенноеЗначение("Документ.Перемещение.ПустаяСсылка");
		
		ИначеЕсли ТипСтатьиДолга = Тип("СправочникСсылка.СтатьиРасходов")
			И ДанныеСтроки.ВидОперации <> "Расход" И ДанныеСтроки.ВидОперации <> "УниверсальнаяОперация" Тогда
			
			ДанныеСтроки.ВидОперации = "Расход";
			ДанныеСтроки.СсылкаНаОперацию = ПредопределенноеЗначение("Документ.Расход.ПустаяСсылка");
			
		ИначеЕсли ТипСтатьиДолга = Тип("СправочникСсылка.СтатьиДоходов")
			И ДанныеСтроки.ВидОперации <> "Доход" И ДанныеСтроки.ВидОперации <> "УниверсальнаяОперация" Тогда
			
			ДанныеСтроки.ВидОперации = "Доход";
			ДанныеСтроки.СсылкаНаОперацию = ПредопределенноеЗначение("Документ.Доход.ПустаяСсылка");
			
		ИначеЕсли ТипСтатьиДолга = Тип("СправочникСсылка.Долги") Тогда
			
			ДанныеСтроки.ВидОперации = ВидОперацииПоВидуДолга(ДанныеСтроки.СтатьяДолг, ДанныеСтроки.СуммаСписания <> 0);
			ДанныеСтроки.СсылкаНаОперацию = ПредопределенноеЗначение("Документ." + ДанныеСтроки.ВидОперации + ".ПустаяСсылка");
			
		КонецЕсли;
		
		ДанныеСтроки.ВидОперацииПредставление = ПредставлениеВидаОперации(ПредставленияВидовОпераций, ДанныеСтроки.ВидОперации);
		Если Не ЗначениеЗаполнено(ДанныеСтроки.СсылкаНаОперацию) Тогда
			ДанныеСтроки.СсылкаНаОперациюПредставление = ДанныеСтроки.ВидОперацииПредставление;
			ДанныеСтроки.СсылкаНаОперациюИконка        = БиблиотекаКартинок.БыстроСоздатьЭлементСписка;
		КонецЕсли;
		
	КонецЕсли;

	ОбновитьПредствалениеАналитики(ДанныеСтроки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидОперацииПоВидуДолга(Долг, ЭтоСписание = Истина)

	Если Не ЗначениеЗаполнено(Долг) Тогда
		Возврат ?(ЭтоСписание, "МыВернулиДолг", "МыВзялиВДолг");
	КонецЕсли;
	
	РеквизитыДолга = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Долг, "ИспользоватьДляУчетаВзятыхДолгов,ИспользоватьДляУчетаВыданныхДолгов");
	Если РеквизитыДолга.ИспользоватьДляУчетаВыданныхДолгов И Не РеквизитыДолга.ИспользоватьДляУчетаВзятыхДолгов Тогда
		//Займы выданные
		Возврат ?(ЭтоСписание, "МыДалиВДолг", "НамВернулиДолг");
	ИначеЕсли Не РеквизитыДолга.ИспользоватьДляУчетаВыданныхДолгов И РеквизитыДолга.ИспользоватьДляУчетаВзятыхДолгов Тогда
		//Кредиты полученные
		Возврат ?(ЭтоСписание, "МыВернулиДолг", "МыВзялиВДолг");
	Иначе
		// Взаимные расчеты
		Возврат ?(ЭтоСписание, "МыВернулиДолг", "НамВернулиДолг");
	КонецЕсли;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредствалениеАналитики(СтрокаВыписки)

	//// Представление аналитики зависит от типа операции и наличия ссылки на операцию
	//Если СтрокаВыписки.ВидОперации <> "Доход" И СтрокаВыписки.ВидОперации <> "Расход" Тогда
	//	
	//	//аналитика для таких операций не предусмотрена
	//	СтрокаВыписки.АналитикаПредставление = "";
	//	
	//ИначеЕсли ЗначениеЗаполнено(СтрокаВыписки.СсылкаНаОперацию) Тогда
	//	
	//	// аналитика уже заполнена в самой операции
	//	СтрокаВыписки.АналитикаПредставление = НСтр("ru='см. операцию…'");
	//	
	//ИначеЕсли СтрокаВыписки.Аналитика <> Неопределено Тогда
	//	
	//	СтрокаВыписки.АналитикаПредставление = "";
	//	
	//	Для каждого СтрокаАналитики Из СтрокаВыписки.Аналитика Цикл
	//		
	//		СтрокаВыписки.АналитикаПредставление = СтрокаВыписки.АналитикаПредставление 
	//					+ ?(ЗначениеЗаполнено(СтрокаВыписки.АналитикаПредставление), "; ", "")
	//					+ Строка(СтрокаАналитики.ВидАналитики) + " = " + ДеньгиКлиентСервер.СокращенноеПредставление(СтрокаАналитики.Представление, 30, Ложь);
	//		
	//	КонецЦикла;
	//	
	//Иначе
	//	
	//	СтрокаВыписки.АналитикаПредставление = НСтр("ru='без аналитики'"); 
	//	
	//КонецЕсли;

КонецПроцедуры
 
&НаКлиенте
Процедура ВыборВидаОперацииЗавершение(Выбор, ДополнительныеПараметры) Экспорт

//	Если Выбор= Неопределено Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДанныеСтроки = Объект.ТаблицаОпераций.НайтиПоИдентификатору(ДополнительныеПараметры.СтрокаТаблицы);
//	Если ДанныеСтроки = Неопределено Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ДанныеСтроки.ВидОперации = Выбор.Значение;
//	ДанныеСтроки.ВидОперацииПредставление = ПредставлениеВидаОперации(ПредставленияВидовОпераций, ДанныеСтроки.ВидОперации);
//	
//	ПараметрыФормыДокумента = Новый Структура;
//	ПараметрыФормыДокумента.Вставить("ИмяВидаДокумента", Выбор.Значение);
//	ПараметрыФормыДокумента.Вставить("ЗначенияЗаполнения", ЗначенияЗаполненияОперации(Объект.ТаблицаОпераций, ДополнительныеПараметры.СтрокаТаблицы, ВалютаУчета));
//	
//	ДополнительныеПараметры.Вставить("ВидОперации", Выбор.Значение);
//	Оповещение = Новый ОписаниеОповещения("СозданиеНовойОперацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
//	РаботаСФормамиДокументовКлиент.ОткрытьФормуНовогоДокументаСУчетомШаблона(Выбор.Значение, ПараметрыФормыДокумента, ЭтотОбъект, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеНовойОперацииЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Объект.ТаблицаОпераций.НайтиПоИдентификатору(ДополнительныеПараметры.СтрокаТаблицы);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ДанныеСтроки.СсылкаНаОперацию = Результат;
	ПроверитьРеквизитыОперацииПоСсылкеНаОперациюСервер(ДополнительныеПараметры.СтрокаТаблицы);
	ПриИзмененииФильтраТаблицыОпераций();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборОперацииЗавершение(Результат, ДополнительныеПараметры) Экспорт

	ДанныеСтроки = Объект.ТаблицаОпераций.НайтиПоИдентификатору(ДополнительныеПараметры.СтрокаТаблицы);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки.СсылкаНаОперацию = Результат;
	ПроверитьРеквизитыОперацииПоСсылкеНаОперациюСервер(ДополнительныеПараметры.СтрокаТаблицы);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеВидаОперации(Знач СтруктураПредставлений, Знач ВидОперации)

	Результат = "";
	
	Если СтруктураПредставлений.Свойство(ВидОперации) Тогда
		Результат = СтруктураПредставлений[ВидОперации];
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ВыполнитьПроверкуПометок()

	ЕстьОтметки = Ложь;
	ОтмеченыСуществующиеОперации = Ложь;
	
	Для каждого СтрокаОперации Из Объект.ТаблицаОпераций Цикл
		
		Если Не СтрокаОперации.Загружать Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьОтметки = Истина;
		
		Если ЗначениеЗаполнено(СтрокаОперации.СсылкаНаОперацию) Тогда
			ОтмеченыСуществующиеОперации = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЕстьОтметки Тогда
		
		ТекстСообщения = НСтр("ru='В списке не отмечено ни одной строки.
			|Пометьте галочкой те строки, по которым нужно создать или обновить операции'"); 
		ПоказатьПредупреждение(, ТекстСообщения, , Заголовок);
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ОтмеченыСуществующиеОперации Тогда
		
		ТекстСообщения = НСтр("ru='В списке отмечены уже существующие операции; при обновлении содержимое этих операций будет заменено.
				|Продолжить создание/обновление операций?'");
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("Продолжить", НСтр("ru='Продолжить'"));
		Кнопки.Добавить("СнятьВыделение", НСтр("ru='Снять отметку с существующих операций'"));
		Кнопки.Добавить("Отмена", НСтр("ru='Отмена'"));
		
		Оповещение = Новый ОписаниеОповещения("ПодтверждениеЗагрузкиЗавершение", ЭтотОбъект, "ОбновлениеОпераций");
		ПоказатьВопрос(Оповещение, ТекстСообщения, Кнопки, , "СнятьВыделение", Заголовок);
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

&НаКлиенте
Процедура ПодтверждениеЗагрузкиЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = "Продолжить" Тогда
		ВыполнитьЗагрузкуОперацийНаКлиенте();
	ИначеЕсли Ответ = "СнятьВыделение" Тогда
		ИзменитьПометки(10);
		ВыполнитьЗагрузкуОперацийНаКлиенте();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуОперацийНаКлиенте()

	Состояние(НСтр("ru='Ждите, идет создание/обновление операций...'")); 
	РезультатЗагрузки = ВыполнитьЗагрузкуОперацийНаСервере();
	ОчиститьСообщения();
	
	КоличествоЧерновиков = РезультатЗагрузки.СписокЧерновиков.Количество();
	Если КоличествоЧерновиков > 0 Тогда
		ТекстСообщения = НСтр("ru='Всего обработано операций: %1
			|Не удалось создать/обновить %2 операции (операций)'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, РезультатЗагрузки.ОбработаноОпераций, КоличествоЧерновиков);
	Иначе
		ТекстСообщения = НСтр("ru='Все отмеченные операции успешно созданы и обновлены.'"); 
	КонецЕсли;
	 
	ПоказатьПредупреждение(, ТекстСообщения, , Заголовок);

КонецПроцедуры

&НаСервере
Функция ВыполнитьЗагрузкуОперацийНаСервере()

	ПустаяКартинка = Новый Картинка;
	ОтмеченныеСтроки = Объект.ТаблицаОпераций.НайтиСтроки(Новый Структура("Загружать", Истина));
	
	Для Каждого СтрокаОперации Из ОтмеченныеСтроки Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаОперации.РСчет)Тогда
			Продолжить;
		КонецЕсли;
		
		//	СтрокаОперации.РСчет = НайтиБанкСчет(СтрокаОперации.РСчетПредставление, СтрокаОперации.РСчетКлючевоеСлово);
		//	СтрокаОперации.КошелекИконка = ПустаяКартинка;
		//	ОбновитьСсылкиВТаблицеОпераций(Объект.ТаблицаОпераций, СтрокаОперации.ВидОперации, "Кошелек", СтрокаОперации.РСчетКлючевоеСлово, СтрокаОперации.РСчет, ПредставленияВидовОпераций, Ложь);
		//	ЗаписатьКлючевоеСловоОъекта(СтрокаОперации.РСчетКлючевоеСлово, СтрокаОперации.РСчет, СтрокаОперации.СуммаПоступления <> 0);
		
		// При необходимости создаем статью, долг, кошелек перемещения
		
		// Обновляем ссылки аналитики
		
	КонецЦикла;
	
	// Создаем операции
	СписокЧерновиков = Новый Массив;
	Для Каждого СтрокаОперации Из ОтмеченныеСтроки Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаОперации.РСчет) Или Не ЗначениеЗаполнено(СтрокаОперации.Дата) Тогда
			СписокЧерновиков.Добавить(СтрокаОперации.ПолучитьИдентификатор());
			Продолжить;
		КонецЕсли;
		
		ЗначенияЗаполнения = ЗначенияЗаполненияОперации(Объект.ТаблицаОпераций, СтрокаОперации.ПолучитьИдентификатор(), ВалютаУчета);
		
		ТекущиеАналитикаИКомментарии = Неопределено;
		Если ЗначениеЗаполнено(СтрокаОперации.СсылкаНаОперацию) Тогда
			ДокументОбъект = СтрокаОперации.СсылкаНаОперацию.ПолучитьОбъект();
			ОчиститьДокумент(ДокументОбъект, ТекущиеАналитикаИКомментарии);
		Иначе
			ДокументОбъект = Документы[ИмяМенеджераПоВидуОперации(СтрокаОперации.ВидОперации)].СоздатьДокумент();
			ДокументОбъект.Автор = ПользователиКлиентСервер.ТекущийПользователь();
		КонецЕсли;
		
		ДокументОбъект.Заполнить(ЗначенияЗаполнения);
		Если Не ЗначениеЗаполнено(ДокументОбъект.НазначениеПлатежа) Тогда
			ДокументОбъект.НазначениеПлатежа = ЗначенияЗаполнения.КомментарийОперации;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаОперации.СсылкаНаОперацию) Тогда
			ПроверитьАналитикуИКомментарии(ДокументОбъект, ТекущиеАналитикаИКомментарии);
		Иначе
			ЗаполнитьАналитикуВНовомДокументе(ДокументОбъект, СтрокаОперации);
		КонецЕсли;
		
		Если ДокументОбъект.ПроверитьЗаполнение() Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			СтрокаОперации.НомерПП = НСтр("ru='см. операцию'"); 
		Иначе
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			СтрокаОперации.НомерПП = НСтр("ru='см. операцию'"); 
			//СписокЧерновиков.Добавить(СтрокаОперации.ПолучитьИдентификатор());
		КонецЕсли;
		СтрокаОперации.СсылкаНаОперацию              = ДокументОбъект.Ссылка;
		СтрокаОперации.СсылкаНаОперациюПредставление = Строка(ДокументОбъект.Ссылка);
		
		СтрокаОперации.НоваяОперация = Число(Не ЗначениеЗаполнено(СтрокаОперации.СсылкаНаОперацию));
		
	КонецЦикла;

	Результат = Новый Структура("ОбработаноОпераций,СписокЧерновиков", ОтмеченныеСтроки.Количество(), СписокЧерновиков);
	
	Если СписокЧерновиков.Количество() = 0 Тогда
		ФильтрТаблицыОпераций = "Загруженные";
	Иначе
		ФильтрТаблицыОпераций = "Новые";
	КонецЕсли;
	 
	ПриИзмененииФильтраТаблицыОпераций(Истина);
	
	Возврат Результат;
	
КонецФункции


&НаКлиентеНаСервереБезКонтекста
Функция ИмяМенеджераПоВидуОперации(ВидОперации)
	
	Если ТипЗнч(ВидОперации) = Тип("ПеречислениеСсылка.ВидыОперацийПоступлениеНаСчет") Тогда
		Возврат "ПоступлениеНаСчет";
		
	ИначеЕсли ТипЗнч(ВидОперации) = Тип("ПеречислениеСсылка.ВидыОперацийРасходСоСчета") Тогда
		Возврат "РасходСоСчета";
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОчиститьДокумент(ДокументОбъект, ТекущиеЗначения)

	ТекущиеЗначения = Неопределено;
	
	ТипДокумента = ТипЗнч(ДокументОбъект);
	//Если ТипДокумента = Тип("ДокументОбъект.УниверсальнаяОперация") Тогда
	//	
	//	ТекущиеЗначения = Новый Структура();
	//	ТекущиеЗначения.Вставить("Доходы", ДокументОбъект.Доходы.Выгрузить(, "СтатьяДохода,АналитикаСтатьиДохода,ФинансоваяЦель,КомментарийСтроки"));
	//	ТекущиеЗначения.Вставить("Расходы", ДокументОбъект.Расходы.Выгрузить(, "СтатьяРасхода,АналитикаСтатьиРасхода,ФинансоваяЦель,КомментарийСтроки"));
	//	
	//	ДокументОбъект.Доходы.Очистить();
	//	ДокументОбъект.Расходы.Очистить();
	//	ДокументОбъект.Перемещения.Очистить();
	//	ДокументОбъект.Накопления.Очистить();
	//	
	//КонецЕсли;
	 
 
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьАналитикуИКомментарии(ДокументОбъект, ПрежниеЗначения)

	Если ПрежниеЗначения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипДокумента = ТипЗнч(ДокументОбъект);
	Если ТипДокумента = Тип("ДокументОбъект.Доход") Тогда
		
		Для каждого СтрокаДокумента Из ДокументОбъект.Доходы Цикл
			
			СтрокаПрежнегоЗначения = ПрежниеЗначения.Найти(СтрокаДокумента.СтатьяДохода, "СтатьяДохода");
			Если СтрокаПрежнегоЗначения <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаПрежнегоЗначения, "СтатьяДохода,АналитикаСтатьи,ФинансоваяЦель,Комментарий");
			КонецЕсли;
			 
		КонецЦикла;
		
	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.Расход") Тогда
		
		Для каждого СтрокаДокумента Из ДокументОбъект.Расходы Цикл
			
			СтрокаПрежнегоЗначения = ПрежниеЗначения.Найти(СтрокаДокумента.СтатьяРасходаИмущество, "СтатьяРасходаИмущество");
			Если СтрокаПрежнегоЗначения <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаПрежнегоЗначения, "СтатьяРасходаИмущество,АналитикаСтатьи,ФинансоваяЦель,КомментарийСтроки");
			КонецЕсли;
			 
		КонецЦикла;
		
	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.УниверсальнаяОперация") Тогда
		
		Для каждого СтрокаДокумента Из ДокументОбъект.Доходы Цикл
			
			СтрокаПрежнегоЗначения = ПрежниеЗначения.Доходы.Найти(СтрокаДокумента.СтатьяДохода, "СтатьяДохода");
			Если СтрокаПрежнегоЗначения <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаПрежнегоЗначения, "СтатьяДохода,АналитикаСтатьиДохода,ФинансоваяЦель,КомментарийСтроки");
			КонецЕсли;
			 
		КонецЦикла;
		
		Для каждого СтрокаДокумента Из ДокументОбъект.Расходы Цикл
			
			СтрокаПрежнегоЗначения = ПрежниеЗначения.Расходы.Найти(СтрокаДокумента.СтатьяРасхода, "СтатьяРасхода");
			Если СтрокаПрежнегоЗначения <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаПрежнегоЗначения, "СтатьяРасхода,АналитикаСтатьиДохода,ФинансоваяЦель,КомментарийСтроки");
			КонецЕсли;
			 
		КонецЦикла;
		
	КонецЕсли;
	 

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьАналитикуВНовомДокументе(ДокументОбъект, СтрокаОперации)

//	Если СтрокаОперации.Аналитика.Количество() = 0
//		Или (СтрокаОперации.ВидОперации <> "Доход" И СтрокаОперации.ВидОперации <> "Расход") Тогда
//		Возврат;
//	КонецЕсли;
//	
//	ВидИЗначениеАналитики = АналитикаСтатей.НоваяТаблицаВидИЗначениеАналитики();
//	
//	ДокументОбъект.АналитикаДокумента.Очистить();
//	Для каждого СтрокаАналитики Из СтрокаОперации.Аналитика Цикл
//		
//		Если Не ЗначениеЗаполнено(СтрокаАналитики.ВидАналитики) Или Не ЗначениеЗаполнено(СтрокаАналитики.Значение)
//			Или (СтрокаОперации.ВидОперации = "Доход" И Не СтрокаАналитики.ВидАналитики.АктуальнаДляДохода)
//			Или (СтрокаОперации.ВидОперации = "Расход" И Не СтрокаАналитики.ВидАналитики.АктуальнаДляРасхода) Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		Если ЗначениеЗаполнено(СтрокаАналитики.ВидАналитики) И ЗначениеЗаполнено(СтрокаАналитики.Значение) Тогда
//			
//			НоваяСтрока = ДокументОбъект.АналитикаДокумента.Добавить();
//			НоваяСтрока.ВидАналитики            = СтрокаАналитики.ВидАналитики;
//			НоваяСтрока.ЗначениеАналитикиВШапке = СтрокаАналитики.Значение;
//			НоваяСтрока.РедактироватьВШапке     = Истина;
//			
//			СтрокаТаблицы = ВидИЗначениеАналитики.Добавить();
//			СтрокаТаблицы.ВидАналитики      = СтрокаАналитики.ВидАналитики;
//			СтрокаТаблицы.ЗначениеАналитики = СтрокаАналитики.Значение;
//			
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	Если ВидИЗначениеАналитики.Количество() > 0 Тогда
//		СсылкаНаНаборАналитики = АналитикаСтатей.ПолучитьСсылкуНаНаборЗначенийАналитик(ВидИЗначениеАналитики, Истина);
//	Иначе
//		СсылкаНаНаборАналитики = Справочники.ЗначенияСубконтоАналитика.ПустаяСсылка();
//	КонецЕсли;
//	
//	ТабЧасть = ?(СтрокаОперации.ВидОперации = "Доход", ДокументОбъект.Доходы, ДокументОбъект.Расходы);
//	Для каждого СтрокаДокумента Из ТабЧасть Цикл
//		СтрокаДокумента.АналитикаСтатьи = СсылкаНаНаборАналитики;
//	КонецЦикла;

КонецПроцедуры
 

&НаКлиентеНаСервереБезКонтекста
Функция ЗначенияЗаполненияОперации(Знач ТаблицаОпераций, Знач ИДСтроки, ВалютаУчета)

	ДанныеСтроки = ТаблицаОпераций.НайтиПоИдентификатору(ИДСтроки);
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Дата", ДанныеСтроки.Дата);
	ЗначенияЗаполнения.Вставить("БанковскийСчет", ДанныеСтроки.РСчет);
	ЗначенияЗаполнения.Вставить("НазначениеПлатежа", ДанныеСтроки.НазначениеПлатежа);
	ЗначенияЗаполнения.Вставить("Контрагент", ДанныеСтроки.Контрагент);
	ЗначенияЗаполнения.Вставить("ВидОперации", ДанныеСтроки.ВидОперации);
	ЗначенияЗаполнения.Вставить("НомерВходящегоДокумента", ДанныеСтроки.НомерПП);
	
	
	Если ДанныеСтроки.СуммаПоступления <> 0 Тогда		
		ЗначенияЗаполнения.Вставить("СуммаДокумента", ДанныеСтроки.СуммаПоступления);
 		
	ИначеЕсли ДанныеСтроки.СуммаСписания <> 0 Тогда		
		ЗначенияЗаполнения.Вставить("СуммаДокумента", ДанныеСтроки.СуммаСписания);
		
	Иначе
		// ?
		
	КонецЕсли;

	Возврат ЗначенияЗаполнения;
	
КонецФункции

&НаСервере
Процедура ПриИзмененииФильтраТаблицыОпераций(ИзменятьОтбор = Ложь)

	КоличествоВсего        = Объект.ТаблицаОпераций.Количество();
	КоличествоНовых        = Объект.ТаблицаОпераций.Итог("НоваяОперация");
	
	ЗаголовокВсеОперации = НСтр("ru='Все операции (%1)'");
	ЗаголовокВсеОперации = СтрШаблон(ЗаголовокВсеОперации, КоличествоВсего);
	ЗаголовокНовые = НСтр("ru='Новые (%1)'");
	ЗаголовокНовые = СтрШаблон(ЗаголовокНовые, КоличествоНовых);
	ЗаголовокЗагруженные = НСтр("ru='Загруженные (%1)'");
	ЗаголовокЗагруженные = СтрШаблон(ЗаголовокЗагруженные, КоличествоВсего - КоличествоНовых);
	
	Элементы.ФильтрТаблицыОпераций.СписокВыбора[0].Представление = ЗаголовокВсеОперации;
	Элементы.ФильтрТаблицыОпераций.СписокВыбора[1].Представление = ЗаголовокНовые;
	Элементы.ФильтрТаблицыОпераций.СписокВыбора[2].Представление = ЗаголовокЗагруженные;
	
	Если ИзменятьОтбор Тогда
		
		Если ФильтрТаблицыОпераций = "Новые" Тогда
			Элементы.ТаблицаОпераций.ОтборСтрок = Новый ФиксированнаяСтруктура("НоваяОперация", 1);
		ИначеЕсли ФильтрТаблицыОпераций = "Загруженные" Тогда
			Элементы.ТаблицаОпераций.ОтборСтрок = Новый ФиксированнаяСтруктура("НоваяОперация", 0);
		Иначе
			Элементы.ТаблицаОпераций.ОтборСтрок = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОперацииПриИзмененииКошелька(Кошелек)

	ТипЧисло = Новый ОписаниеТипов("Число");
	ТаблицаПоискаОпераций = Новый ТаблицаЗначений;
	ТаблицаПоискаОпераций.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТаблицаПоискаОпераций.Колонки.Добавить("СуммаПоступления", ТипЧисло);
	ТаблицаПоискаОпераций.Колонки.Добавить("СуммаСписания", ТипЧисло);
	ТаблицаПоискаОпераций.Колонки.Добавить("ИДСтроки", ТипЧисло);
	
	СтрокиВыписки = Объект.ТаблицаОпераций.НайтиСтроки(Новый Структура("Кошелек", Кошелек));
	Для каждого СтрокаВыписки Из СтрокиВыписки Цикл
		НоваяСтрока = ТаблицаПоискаОпераций.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыписки);
		НоваяСтрока.ИДСтроки = Объект.ТаблицаОпераций.Индекс(СтрокаВыписки);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Кошелек", Кошелек);
	Запрос.УстановитьПараметр("СписокДатОпераций", ТаблицаПоискаОпераций);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписокДатОпераций.Дата,
	|	СписокДатОпераций.СуммаПоступления,
	|	СписокДатОпераций.СуммаСписания,
	|	СписокДатОпераций.ИДСтроки
	|ПОМЕСТИТЬ СписокДатОпераций
	|ИЗ
	|	&СписокДатОпераций КАК СписокДатОпераций
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыОпераций.Операция,
	|	ВЫБОР
	|		КОГДА ОбъектыОпераций.Операция ССЫЛКА Документ.Расход
	|			ТОГДА 9
	|		КОГДА ОбъектыОпераций.Операция ССЫЛКА Документ.Доход
	|			ТОГДА 6
	|		КОГДА ОбъектыОпераций.Операция ССЫЛКА Документ.УниверсальнаяОперация
	|			ТОГДА 30
	|		КОГДА ОбъектыОпераций.Операция ССЫЛКА Документ.Перемещение
	|			ТОГДА 12
	|		КОГДА ОбъектыОпераций.Операция ССЫЛКА Документ.МыДалиВДолг
	|			ТОГДА 18
	|		КОГДА ОбъектыОпераций.Операция ССЫЛКА Документ.НамВернулиДолг
	|			ТОГДА 21
	|		КОГДА ОбъектыОпераций.Операция ССЫЛКА Документ.МыВзялиВДолг
	|			ТОГДА 24
	|		КОГДА ОбъектыОпераций.Операция ССЫЛКА Документ.МыВернулиДолг
	|			ТОГДА 27
	|		КОГДА ОбъектыОпераций.Операция ССЫЛКА Документ.ОбменВалюты
	|			ТОГДА 15
	|		КОГДА ОбъектыОпераций.Операция ССЫЛКА Документ.ВводИзменениеОстатка
	|			ТОГДА 33
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ЖурналДокументовОбщийЖурналДокументов.Проведен
	|				ИЛИ ЖурналДокументовОбщийЖурналДокументов.ЭтоШаблон
	|			ТОГДА 1
	|		КОГДА ЖурналДокументовОбщийЖурналДокументов.ПометкаУдаления
	|			ТОГДА 2
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВидОперацииИконка,
	|	СписокДатОпераций.ИДСтроки
	|ИЗ
	|	СписокДатОпераций КАК СписокДатОпераций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыОпераций КАК ОбъектыОпераций
	|			ЛЕВОЕ СОЕДИНЕНИЕ ЖурналДокументов.ОбщийЖурналДокументов КАК ЖурналДокументовОбщийЖурналДокументов
	|			ПО (ЖурналДокументовОбщийЖурналДокументов.Ссылка = ОбъектыОпераций.Операция)
	|		ПО (НАЧАЛОПЕРИОДА(СписокДатОпераций.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(ОбъектыОпераций.Дата, ДЕНЬ))
	|			И (ОбъектыОпераций.ПредметУчета = &Кошелек)
	|			И (ОбъектыОпераций.СуммаСписания <> 0
	|					И СписокДатОпераций.СуммаСписания = ОбъектыОпераций.СуммаСписания
	|				ИЛИ ОбъектыОпераций.СуммаПоступления <> 0
	|					И СписокДатОпераций.СуммаПоступления = ОбъектыОпераций.СуммаПоступления)
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаВыписки = Объект.ТаблицаОпераций[Выборка.ИДСтроки];
		СтрокаВыписки.СсылкаНаОперацию              = Выборка.Операция;
		
	КонецЦикла;

	ПриИзмененииФильтраТаблицыОпераций();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОперацию(Операция, ВидОперации, Оповещение, ПараметрыОперации = Неопределено)

	// Обход ошибки платформы, из-за которой ПоказатьЗначение() не вызывает обработчик оповещения
	Если ТипЗнч(ПараметрыОперации) <> Тип("Структура") Тогда
		ПараметрыОперации = Новый Структура;
	КонецЕсли;
	ПараметрыОперации.Вставить("Ключ", Операция);
	 
	ОткрытьФорму("Документ." + ИмяМенеджераПоВидуОперации(ВидОперации) + ".ФормаОбъекта", ПараметрыОперации, ЭтотОбъект, Операция, , , Оповещение);

КонецПроцедуры
 

#КонецОбласти


#Область ЧтениеСозданиеОбъектовУчета

&НаКлиенте
Процедура ОткрытьСписокКлючевыхСлов()

	ДанныеСтроки = Элементы.ТаблицаОпераций.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//Если Элементы.ТаблицаОпераций.ТекущийЭлемент = Элементы.ТаблицаОперацийСтатьяДолг Тогда
	//	КлючевоеСлово = ДанныеСтроки.СтатьяДолгКлючевоеСлово;
	//Иначе
		КлючевоеСлово = ДанныеСтроки.ВидОперацииКлючевоеСлово;
	//КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КлючевоеСлово) Тогда
		Возврат;
	КонецЕсли;
	
	 
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура);
	ПараметрыФормы.Отбор.Вставить("КлючевоеСлово", КлючевоеСлово);
	ОткрытьФорму("РегистрСведений.КБ_КлючевыеСловаОбъектов.ФормаСписка", ПараметрыФормы, , , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура Декорация2Нажатие(Элемент)
	Элементы.ГруппаПодсказкаСпискаОпераций.Видимость = НЕ Элементы.ГруппаПодсказкаСпискаОпераций.Видимость;
КонецПроцедуры



#КонецОбласти

#КонецОбласти
